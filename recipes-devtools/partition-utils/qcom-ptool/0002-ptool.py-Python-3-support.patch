From 8cb694be1972d19ed591ebe37495d4edbf9dbe11 Mon Sep 17 00:00:00 2001
From: Viswanath Kraleti <vkraleti@codeaurora.org>
Date: Fri, 28 Aug 2020 11:52:21 +0530
Subject: [PATCH] ptool.py: Python 3 support

Upstream-Status: Pending

Signed-off-by: Viswanath Kraleti <vkraleti@codeaurora.org>
Signed-off-by: Ricardo Salveti <ricardo.salveti@oss.qualcomm.com>
---
 ptool.py | 1050 +++++++++++++++++++++++++++---------------------------
 1 file changed, 525 insertions(+), 525 deletions(-)

diff --git a/ptool.py b/ptool.py
index 66c95c5..ba62caa 100644
--- a/ptool.py
+++ b/ptool.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/env python3
 #===========================================================================
 #Copyright (c) 2019, The Linux Foundation. All rights reserved.
 
@@ -35,9 +35,9 @@ import struct
 from types import *
 from time import sleep
 
-if sys.version_info < (2,5): 
+if sys.version_info < (2,5):
     sys.stdout.write("\n\nERROR: This script needs Python version 2.5 or greater, detected as ")
-    print sys.version_info
+    print(sys.version_info)
     sys.exit()  # error
 
 from xml.etree import ElementTree as ET
@@ -94,20 +94,21 @@ EBR         = [0]*SECTOR_SIZE_IN_BYTES
 
 hash_w       = [{'start_sector':0,'num_sectors':(HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']*1024/SECTOR_SIZE_IN_BYTES),
                  'end_sector':(HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']*1024/SECTOR_SIZE_IN_BYTES)-1,'physical_partition_number':0,'boundary_num':0,'num_boundaries_covered':1}]
+gen_patch = True
 NumWPregions = 0
 
 def ShowPartitionExample():
-    print "Your \"partition.xml\" file needs to look like something like this below"
-    print "\t(i.e. notice the *multiple* physical_partition tags)\n"
-    print "<!-- This is physical partition 0 -->"
-    print "<physical_partition>"
-    print "  <partition label=\"SBL1\" size_in_kb=\"100\" type=\"DEA0BA2C-CBDD-4805-B4F9-F428251C3E98\" filename=\"sbl1.mbn\"/>"
-    print "</physical_partition>"
-    print " "
-    print "<!-- This is physical partition 1 -->"
-    print "<physical_partition>"
-    print "  <partition label=\"SBL2\" size_in_kb=\"200\" type=\"8C6B52AD-8A9E-4398-AD09-AE916E53AE2D\" filename=\"sbl2.mbn\"/>"
-    print "</physical_partition>"
+    print("Your \"partition.xml\" file needs to look like something like this below")
+    print("\t(i.e. notice the *multiple* physical_partition tags)\n")
+    print("<!-- This is physical partition 0 -->")
+    print("<physical_partition>")
+    print("  <partition label=\"SBL1\" size_in_kb=\"100\" type=\"DEA0BA2C-CBDD-4805-B4F9-F428251C3E98\" filename=\"sbl1.mbn\"/>")
+    print("</physical_partition>")
+    print(" ")
+    print("<!-- This is physical partition 1 -->")
+    print("<physical_partition>")
+    print("  <partition label=\"SBL2\" size_in_kb=\"200\" type=\"8C6B52AD-8A9E-4398-AD09-AE916E53AE2D\" filename=\"sbl2.mbn\"/>")
+    print("</physical_partition>")
 
 def ConvertKBtoSectors(x):
     ## 1KB / SECTOR_SIZE_IN_BYTES normally means return 2 (i.e. with SECTOR_SIZE_IN_BYTES=512)
@@ -116,12 +117,11 @@ def ConvertKBtoSectors(x):
 
 def UpdatePatch(StartSector,ByteOffset,PHYPartition,size_in_bytes,szvalue,szfilename,szwhat):
     global PatchesXML
-
     SubElement(PatchesXML, 'patch', {'start_sector':StartSector, 'byte_offset':ByteOffset,
                                      'physical_partition_number':str(PHYPartition), 'size_in_bytes':str(size_in_bytes),
                                      'value':szvalue, 'filename':szfilename, 'SECTOR_SIZE_IN_BYTES':str(SECTOR_SIZE_IN_BYTES), 'what':szwhat   })
 
-                    
+
 def UpdateRawProgram(RawProgramXML, StartSector, size_in_KB, PHYPartition, file_sector_offset, num_partition_sectors, filename, sparse, label,readbackverify='false', partofsingleimage='false'):
     if StartSector<0:
         szStartSector = "NUM_DISK_SECTORS%d." % StartSector      ## as in NUM_DISK_SECTORS-33 since %d=-33
@@ -131,8 +131,8 @@ def UpdateRawProgram(RawProgramXML, StartSector, size_in_KB, PHYPartition, file_
         #print "UpdateRawProgram StartSector=",StartSector
         #print "StartSector=",type(StartSector)
         #print "-----------------------------------------"
-        
-        szStartByte   = str(hex(StartSector*SECTOR_SIZE_IN_BYTES))
+
+        szStartByte   = str(hex(int(StartSector)*SECTOR_SIZE_IN_BYTES))
         szStartSector = str(StartSector)
 
     #import pdb; pdb.set_trace()
@@ -146,14 +146,14 @@ def UpdateRawProgram(RawProgramXML, StartSector, size_in_KB, PHYPartition, file_
 
     if erasefirst:
         if label!="cdt":
-            SubElement(RawProgramXML, 'erase', {'start_sector':szStartSector, 'physical_partition_number':str(PHYPartition), 
-                                                'num_partition_sectors':str(num_partition_sectors), 'filename':filename, 
+            SubElement(RawProgramXML, 'erase', {'start_sector':szStartSector, 'physical_partition_number':str(PHYPartition),
+                                                'num_partition_sectors':str(num_partition_sectors), 'filename':filename,
                                                 'SECTOR_SIZE_IN_BYTES':str(SECTOR_SIZE_IN_BYTES) })
 
 
     SubElement(RawProgramXML, 'program', {'start_sector':szStartSector, 'size_in_KB':str(size_in_KB), 'physical_partition_number':str(PHYPartition), 'partofsingleimage':partofsingleimage,
                                           'file_sector_offset':str(file_sector_offset), 'num_partition_sectors':str(num_partition_sectors), 'readbackverify':readbackverify,
-                                          'filename':filename,  'sparse':sparse, 'start_byte_hex':szStartByte,  'SECTOR_SIZE_IN_BYTES':str(SECTOR_SIZE_IN_BYTES), 'label':label       })                                              
+                                          'filename':filename,  'sparse':sparse, 'start_byte_hex':szStartByte,  'SECTOR_SIZE_IN_BYTES':str(SECTOR_SIZE_IN_BYTES), 'label':label       })
 
 
     #iter = RawProgramXML.getiterator()
@@ -168,37 +168,37 @@ def UpdateRawProgram(RawProgramXML, StartSector, size_in_KB, PHYPartition, file_
 
     #import pdb; pdb.set_trace()
 
-                    
-                    
+
+
 def PrintBigWarning(sz):
-    print "\t                          _             "
-    print "\t                         (_)            "
-    print "\t__      ____ _ _ __ _ __  _ _ __   __ _ "
-    print "\t\\ \\ /\\ / / _` | '__| '_ \\| | '_ \\ / _` |"
-    print "\t \\ V  V / (_| | |  | | | | | | | | (_| |"
-    print "\t  \\_/\\_/ \\__,_|_|  |_| |_|_|_| |_|\\__, |"
-    print "\t                                   __/ |"
-    print "\t                                  |___/ \n"
+    print("\t                          _             ")
+    print("\t                         (_)            ")
+    print("\t__      ____ _ _ __ _ __  _ _ __   __ _ ")
+    print("\t\\ \\ /\\ / / _` | '__| '_ \\| | '_ \\ / _` |")
+    print("\t \\ V  V / (_| | |  | | | | | | | | (_| |")
+    print("\t  \\_/\\_/ \\__,_|_|  |_| |_|_|_| |_|\\__, |")
+    print("\t                                   __/ |")
+    print("\t                                  |___/ \n")
 
     if len(sz)>0:
-        print sz
+        print(sz)
 
 def ValidGUIDForm(GUID):
 
     if type(GUID) is not str:
         GUID = str(GUID)
 
-    print "Testing if GUID=",GUID
+    print("Testing if GUID=",GUID)
 
     m = re.search("0x([a-fA-F\d]{32})$", GUID)     #0xC79926B7B668C0874433B9E5EBD0A0A2
-    if type(m) is not NoneType:
+    if m is not None:
         return True
 
-    m = re.search("([a-fA-F\d]{8})-([a-fA-F\d]{4})-([a-fA-F\d]{4})-([a-fA-F\d]{2})([a-fA-F\d]{2})-([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})", GUID) 
-    if type(m) is not NoneType:
+    m = re.search("([a-fA-F\d]{8})-([a-fA-F\d]{4})-([a-fA-F\d]{4})-([a-fA-F\d]{2})([a-fA-F\d]{2})-([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})", GUID)
+    if m is not None:
         return True
 
-    print "GUID does not match regular expression"
+    print("GUID does not match regular expression")
 
     return False
 
@@ -213,8 +213,8 @@ def ValidateTYPE(Type):
         Type = str(Type)
 
     m = re.search("^(0x)?([a-fA-F\d][a-fA-F\d]?)$", Type)
-    if type(m) is NoneType:
-        print "\tWARNING: Type \"%s\" is not in the form 0x4C" % Type
+    if m is None:
+        print("\tWARNING: Type \"%s\" is not in the form 0x4C" % Type)
         sys.exit(1)
     else:
         #print m.group(2)
@@ -227,43 +227,43 @@ def ValidateGUID(GUID):
     if type(GUID) is not str:
         GUID = str(GUID)
 
-    print "Looking to validate GUID=",GUID
+    print("Looking to validate GUID=",GUID)
 
     m = re.search("0x([a-fA-F\d]{32})$", GUID)     #0xC79926B7B668C0874433B9E5EBD0A0A2
-    if type(m) is not NoneType:
+    if m is not None:
         tempGUID = int(m.group(1),16)
-        print "\tGUID \"%s\"" % GUID
+        print("\tGUID \"%s\"" % GUID)
 
         if tempGUID == PARTITION_SYSTEM_GUID:
-            print "\tPARTITION_SYSTEM_GUID detected\n"
+            print("\tPARTITION_SYSTEM_GUID detected\n")
         elif tempGUID == PARTITION_MSFT_RESERVED_GUID:
-            print "\tPARTITION_MSFT_RESERVED_GUID detected\n"
+            print("\tPARTITION_MSFT_RESERVED_GUID detected\n")
         elif tempGUID == PARTITION_BASIC_DATA_GUID:
-            print "\tPARTITION_BASIC_DATA_GUID detected\n"
+            print("\tPARTITION_BASIC_DATA_GUID detected\n")
         else:
-            print "\tUNKNOWN PARTITION_GUID detected\n"
+            print("\tUNKNOWN PARTITION_GUID detected\n")
 
         return tempGUID
-    
+
     else:
         #ebd0a0a2-b9e5-4433-87c0-68b6b72699c7  --> #0x C7 99 26 B7 B6 68 C087 4433 B9E5 EBD0A0A2
-        m = re.search("([a-fA-F\d]{8})-([a-fA-F\d]{4})-([a-fA-F\d]{4})-([a-fA-F\d]{2})([a-fA-F\d]{2})-([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})", GUID) 
-        if type(m) is not NoneType:
-            print "Found more advanced type"
+        m = re.search("([a-fA-F\d]{8})-([a-fA-F\d]{4})-([a-fA-F\d]{4})-([a-fA-F\d]{2})([a-fA-F\d]{2})-([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})([a-fA-F\d]{2})", GUID)
+        if m is not None:
+            print("Found more advanced type")
             tempGUID = (int(m.group(4),16)<<64) | (int(m.group(3),16)<<48) | (int(m.group(2),16)<<32) | int(m.group(1),16)
             tempGUID|= (int(m.group(8),16)<<96) | (int(m.group(7),16)<<88) | (int(m.group(6),16)<<80) | (int(m.group(5),16)<<72)
             tempGUID|= (int(m.group(11),16)<<120)| (int(m.group(10),16)<<112)| (int(m.group(9),16)<<104)
-            print "** CONVERTED GUID \"%s\" is FOUND --> 0x%X" % (GUID,tempGUID)
+            print("** CONVERTED GUID \"%s\" is FOUND --> 0x%X" % (GUID,tempGUID))
             return tempGUID
         else:
-            print "\nWARNING: "+"-"*78
-            print "*"*78
-            print "WARNING: GUID \"%s\" is not in the form ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" % GUID
-            print "*"*78
-            print "WARNING"+"-"*78+"\n"
-            print "Converted to PARTITION_BASIC_DATA_GUID (0xC79926B7B668C0874433B9E5EBD0A0A2)\n"
-            return PARTITION_BASIC_DATA_GUID    
-    
+            print("\nWARNING: "+"-"*78)
+            print("*"*78)
+            print("WARNING: GUID \"%s\" is not in the form ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" % GUID)
+            print("*"*78)
+            print("WARNING"+"-"*78+"\n")
+            print("Converted to PARTITION_BASIC_DATA_GUID (0xC79926B7B668C0874433B9E5EBD0A0A2)\n")
+            return PARTITION_BASIC_DATA_GUID
+
 def EnsureDirectoryExists(filename):
     dir = os.path.dirname(filename)
 
@@ -278,20 +278,20 @@ def WriteGPT(GPTMAIN, GPTBACKUP, GPTEMPTY):
     #    opfile.write(struct.pack("B", b))
     #for b in BackupGPT:
     #    opfile.write(struct.pack("B", b))
-        
+
     ofile = open(GPTMAIN, "wb")
     for b in PrimaryGPT:
         ofile.write(struct.pack("B", b))
     ofile.close()
 
-    print "\nCreated \"%s\"\t\t\t<-- Primary GPT partition tables + protective MBR" % GPTMAIN
+    print("\nCreated \"%s\"\t\t\t<-- Primary GPT partition tables + protective MBR" % GPTMAIN)
 
     ofile = open(GPTBACKUP, "wb")
     for b in BackupGPT:
         ofile.write(struct.pack("B", b))
     ofile.close()
 
-    print "Created \"%s\"\t\t<-- Backup GPT partition tables" % GPTBACKUP
+    print("Created \"%s\"\t\t<-- Backup GPT partition tables" % GPTBACKUP)
 
     ofile = open(GPTBOTH, "wb")
     for b in PrimaryGPT:
@@ -300,7 +300,7 @@ def WriteGPT(GPTMAIN, GPTBACKUP, GPTEMPTY):
         ofile.write(struct.pack("B", b))
     ofile.close()
 
-    print "Created \"%s\" \t\t<-- you can run 'perl parseGPT.pl %s'" % (GPTBOTH,GPTBOTH)
+    print("Created \"%s\" \t\t<-- you can run 'perl parseGPT.pl %s'" % (GPTBOTH,GPTBOTH))
 
     ## EmptyGPT is just all 0's, let's fill in the correct data
     FillInEmptyGPT()
@@ -310,7 +310,7 @@ def WriteGPT(GPTMAIN, GPTBACKUP, GPTEMPTY):
         ofile.write(struct.pack("B", b))
     ofile.close()
 
-    print "Created \"%s\"\t\t<-- Empty GPT partition table, use to force EDL mode (very useful)" % GPTEMPTY
+    print("Created \"%s\"\t\t<-- Empty GPT partition table, use to force EDL mode (very useful)" % GPTEMPTY)
 
 def FillInEmptyGPT():
     global EmptyGPT
@@ -338,57 +338,58 @@ def FillInEmptyGPT():
     i+=16
     EmptyGPT[i:i+9]     = [0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x74, 0x00, 0x79]    # unicode "empty" partition name
 
-    
+
 
 def UpdatePrimaryGPT(value,length,i):
     global PrimaryGPT
     for b in range(length):
-        PrimaryGPT[i] = ((value>>(b*8)) & 0xFF) ; i+=1
+        PrimaryGPT[i] = ((int(value)>>(b*8)) & 0xFF) ; i+=1
     return i
 
 def UpdateBackupGPT(value,length,i):
     global BackupGPT
     for b in range(length):
-        BackupGPT[i] = ((value>>(b*8)) & 0xFF) ; i+=1
+        BackupGPT[i] = ((int(value)>>(b*8)) & 0xFF) ; i+=1
     return i
 
 def ShowBackupGPT(sector):
     global BackupGPT
-    print "Sector: %d" % sector
+    print("Sector: %d" % sector)
     for j in range(32):
         for i in range(16):
             sys.stdout.write("%.2X " % BackupGPT[i+j*16+sector*SECTOR_SIZE_IN_BYTES])
-        print " "
-    print " "
+        print(" ")
+    print(" ")
 
-def CreateFileOfZeros(filename,num_sectors):
+def CreateFileOfZeros(filename,num_total_sectors):
     if OutputFolder:
         filename = os.path.join(OutputFolder, filename)
     try:
         opfile = open(filename, "w+b")
-    except Exception, x:
-        print "ERROR: Could not create '%s', cwd=%s" % (filename,os.getcwd() )
-        print "REASON: %s" % (x)
+    except Exception as x:
+        print("ERROR: Could not create '%s', cwd=%s" % (filename,os.getcwd() ))
+        print("REASON: %s" % (x))
         sys.exit(1)
-        
+
+    num_sectors = int(num_total_sectors)
     temp = [0]*(SECTOR_SIZE_IN_BYTES*num_sectors)
     zeros = struct.pack("%iB"%(SECTOR_SIZE_IN_BYTES*num_sectors),*temp)
     try:
         opfile.write(zeros)
-    except Exception, x:
-        print "ERROR: Could not write zeros to '%s'\nREASON: %s" % (filename,x)
+    except Exception as x:
+        print("ERROR: Could not write zeros to '%s'\nREASON: %s" % (filename,x))
         sys.exit(1)
-    
+
     try:
         opfile.close()
-    except Exception, x:
-        print "\tWARNING: Could not close %s" % filename
-        print "REASON: %s" % (x)
+    except Exception as x:
+        print("\tWARNING: Could not close %s" % filename)
+        print("REASON: %s" % (x))
 
-    print "Created \"%s\"\t\t<-- full of binary zeros - used by \"wipe\" rawprogram files" % filename
-            
-def CreateErasingRawProgramFiles():
+    print("Created \"%s\"\t\t<-- full of binary zeros - used by \"wipe\" rawprogram files" % filename)
 
+def CreateErasingRawProgramFiles():
+    global gen_patch
     CreateFileOfZeros("zeros_1sector.bin",1)
     CreateFileOfZeros("zeros_%dsectors.bin" % BackupGPTNumLBAs,BackupGPTNumLBAs)
 
@@ -402,23 +403,27 @@ def CreateErasingRawProgramFiles():
 
         UpdateRawProgram(temp,0, 0.5, i, 0, 1, "zeros_33sectors.bin", "false", "Overwrite MBR sector")
         UpdateRawProgram(temp,1, BackupGPTNumLBAs*SECTOR_SIZE_IN_BYTES/1024.0, i, 0, BackupGPTNumLBAs, "zeros_%dsectors.bin" % BackupGPTNumLBAs, "false", "Overwrite Primary GPT Sectors")
-        UpdateRawProgram(temp,-BackupGPTNumLBAs, BackupGPTNumLBAs*SECTOR_SIZE_IN_BYTES/1024.0, i, 0, BackupGPTNumLBAs, "zeros_%dsectors.bin" % BackupGPTNumLBAs, "false", "Overwrite Backup GPT Sectors")
+
+        backup_gpt_lba = -BackupGPTNumLBAs
+        if gen_patch == True:
+            UpdateRawProgram(temp,backup_gpt_lba, BackupGPTNumLBAs*SECTOR_SIZE_IN_BYTES/1024.0, i, 0, BackupGPTNumLBAs, "zeros_%dsectors.bin" % BackupGPTNumLBAs, "false", "Overwrite Backup GPT Sectors")
 
         RAW_PROGRAM = '%swipe_rawprogram_PHY%d.xml' % (OutputFolder,i)
 
         opfile = open(RAW_PROGRAM, "w")
         opfile.write( prettify(temp) )
         opfile.close()
-        print "Created \"%s\"\t<-- Used to *wipe/erase* partition information" % RAW_PROGRAM
+        print("Created \"%s\"\t<-- Used to *wipe/erase* partition information" % RAW_PROGRAM)
+
 
-    
 NumPartitions       = 0
 SizeOfPartitionArray= 0
 
 def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
     global opfile,PhyPartition,PrimaryGPT,BackupGPT,EmptyGPT,RawProgramXML, GPTMAIN, GPTBACKUP, GPTBOTH, RAW_PROGRAM, PATCHES, PrimaryGPTNumLBAs, BackupGPTNumLBAs
+    global gen_patch
 
-    print "\n\nMaking GUID Partitioning Table (GPT)"
+    print("\n\nMaking GUID Partitioning Table (GPT)")
 
     #PrintBanner("instructions")
 
@@ -460,8 +465,8 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
     ## Step 2. Move through xml definition and figure out partitions sizes
     ## ---------------------------------------------------------------------------------
 
-    PrimaryGPTNumLBAs=len(PrimaryGPT)/SECTOR_SIZE_IN_BYTES
-    BackupGPTNumLBAs =len(BackupGPT)/SECTOR_SIZE_IN_BYTES
+    PrimaryGPTNumLBAs=int(len(PrimaryGPT)/SECTOR_SIZE_IN_BYTES)
+    BackupGPTNumLBAs =int(len(BackupGPT)/SECTOR_SIZE_IN_BYTES)
     i           = 2*SECTOR_SIZE_IN_BYTES    ## partition arrays begin here
     FirstLBA    = PrimaryGPTNumLBAs
     LastLBA     = FirstLBA               ## Make these equal at first
@@ -470,34 +475,30 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
         UpdateWPhash(FirstLBA, 0)   # make sure 1st write protect boundary is setup correctly
 
     #print "len(PhyPartition)=%d and k=%d" % (len(PhyPartition),k)
-    
+
     if(k>=len(PhyPartition)):
         if UserProvided==True:
-            print "\nERROR: PHY Partition %i of %i not found" % (k,len(PhyPartition))
-            print "\nERROR: PHY Partition %i of %i not found\n\n" % (k,len(PhyPartition))
+            print("\nERROR: PHY Partition %i of %i not found" % (k,len(PhyPartition)))
+            print("\nERROR: PHY Partition %i of %i not found\n\n" % (k,len(PhyPartition)))
             ShowPartitionExample()
             sys.exit()
         else:
-            print "\nERROR: PHY Partition %i of %i not found\n\n" % (k,len(PhyPartition))
+            print("\nERROR: PHY Partition %i of %i not found\n\n" % (k,len(PhyPartition)))
             return  ## Automatically trying to do 0 to 7, and some don't exist, which is to be expected
 
     SectorsTillNextBoundary = 0
 
 
-    print "\n\nOn PHY Partition %d that has %d partitions" % (k,len(PhyPartition[k]))
+    print("\n\nOn PHY Partition %d that has %d partitions" % (k,len(PhyPartition[k])))
     for j in range(len(PhyPartition[k])):
         #print "\nPartition name='%s' (readonly=%s)" % (PhyPartition[k][j]['label'], PhyPartition[k][j]['readonly'])
         #print "\tat sector location %d (%d KB or %.2f MB) and LastLBA=%d" % (FirstLBA,FirstLBA/2,FirstLBA/2048,LastLBA)
         #print "%d of %d with label %s" %(j,len(PhyPartition[k]),PhyPartition[k][j]['label'])
 
-        print "\n"+"="*78
-        print " _   (\"-._   (\"-._   (\"-._   (\"-._   (\"-._   (\"-._   (\"-._   (\"-._   (\"-."
-        print "   )   )   )   )   )   )   )   )   )   )   )   )   )   )   )   )   )   )"
-        print "  (_,-\"   (_,-\"   (_,-\"   (_,-\"   (_,-\"   (_,-\"   (_,-\"   (_,-\"   (_,-\""
-        print "="*78
-	
+        print("\n"+"="*78)
+
         PhyPartition[k][j]['size_in_kb'] = int(PhyPartition[k][j]['size_in_kb'])
-        print "\n\n%d of %d \"%s\" (readonly=%s) and size=%dKB (%dMB) (%i sectors with %i bytes/sector)" %(j+1,len(PhyPartition[k]),PhyPartition[k][j]['label'],PhyPartition[k][j]['readonly'],PhyPartition[k][j]['size_in_kb'],PhyPartition[k][j]['size_in_kb']/1024,ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb']),SECTOR_SIZE_IN_BYTES)
+        print("\n\n%d of %d \"%s\" (readonly=%s) and size=%dKB (%dMB) (%i sectors with %i bytes/sector)" %(j+1, len(PhyPartition[k]), PhyPartition[k][j]['label'], PhyPartition[k][j]['readonly'], PhyPartition[k][j]['size_in_kb'], PhyPartition[k][j]['size_in_kb']/1024, ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb']), SECTOR_SIZE_IN_BYTES))
 
         if (PhyPartition[k][j]['size_in_kb']*1024)%SECTOR_SIZE_IN_BYTES>0:
             ## Have a remainder, need to round up to next full sector
@@ -506,108 +507,109 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
             PhyPartition[k][j]['size_in_kb'] = (TempResult * SECTOR_SIZE_IN_BYTES)/1024
 
             ##import pdb; pdb.set_trace() ## verifying sizes
-        
-	if HashInstructions['PERFORMANCE_BOUNDARY_IN_KB']>0 and HashInstructions['ALIGN_PARTITIONS_TO_PERFORMANCE_BOUNDARY'] is False:
-	    PrintBigWarning("WARNING: HashInstructions['PERFORMANCE_BOUNDARY_IN_KB'] is %i KB\n\tbut HashInstructions['ALIGN_PARTITIONS_TO_PERFORMANCE_BOUNDARY'] is FALSE!!\n\n" % HashInstructions['PERFORMANCE_BOUNDARY_IN_KB'])
-	    PrintBigWarning("WARNING: This means partitions will *NOT* be aligned to a HashInstructions['PERFORMANCE_BOUNDARY_IN_KB'] of %i KB !!\n\n" % HashInstructions['PERFORMANCE_BOUNDARY_IN_KB'])
-	    print "To correct this, partition.xml should look like this\n"
-	    print "\t<parser_instructions>"
-	    print "\t\tPERFORMANCE_BOUNDARY_IN_KB = %i" % Partition['PERFORMANCE_BOUNDARY_IN_KB']
-	    print "\t\tALIGN_PARTITIONS_TO_PERFORMANCE_BOUNDARY=true"
-	    print "\t</parser_instructions>\n\n"
-	
-        if HashInstructions['ALIGN_PARTITIONS_TO_PERFORMANCE_BOUNDARY'] is True:
-            ## to be here means this partition *must* be on an ALIGN boundary 
-            print "\tAlignment is to %iKB" % PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB']
-            SectorsTillNextBoundary = ReturnNumSectorsTillBoundary(FirstLBA,PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB']) ## hi
-            if SectorsTillNextBoundary>0:
-                print "\tSectorsTillNextBoundary=%d, FirstLBA=%d it needs to be moved to be aligned to %d" % (SectorsTillNextBoundary,FirstLBA,FirstLBA + SectorsTillNextBoundary)
-                ##print "\tPhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB']=",PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB']
-                FirstLBA += SectorsTillNextBoundary
-	else:
-	    if PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB']>0:
-	        print "\tThis partition is *NOT* aligned to a performance boundary\n"
-	
+
+        if HashInstructions['PERFORMANCE_BOUNDARY_IN_KB']>0 and HashInstructions['ALIGN_PARTITIONS_TO_PERFORMANCE_BOUNDARY'] is False:
+            PrintBigWarning("WARNING: HashInstructions['PERFORMANCE_BOUNDARY_IN_KB'] is %i KB\n\tbut HashInstructions['ALIGN_PARTITIONS_TO_PERFORMANCE_BOUNDARY'] is FALSE!!\n\n" % HashInstructions['PERFORMANCE_BOUNDARY_IN_KB'])
+            PrintBigWarning("WARNING: This means partitions will *NOT* be aligned to a HashInstructions['PERFORMANCE_BOUNDARY_IN_KB'] of %i KB !!\n\n" % HashInstructions['PERFORMANCE_BOUNDARY_IN_KB'])
+            print("To correct this, partition.xml should look like this\n")
+            print("\t<parser_instructions>")
+            print("\t\tPERFORMANCE_BOUNDARY_IN_KB = %i" % Partition['PERFORMANCE_BOUNDARY_IN_KB'])
+            print("\t\tALIGN_PARTITIONS_TO_PERFORMANCE_BOUNDARY=true")
+            print("\t</parser_instructions>\n\n")
+
+            if HashInstructions['ALIGN_PARTITIONS_TO_PERFORMANCE_BOUNDARY'] is True:
+                ## to be here means this partition *must* be on an ALIGN boundary
+                print("\tAlignment is to %iKB" % PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB'])
+                SectorsTillNextBoundary = ReturnNumSectorsTillBoundary(FirstLBA,PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB']) ## hi
+                if SectorsTillNextBoundary>0:
+                    print("\tSectorsTillNextBoundary=%d, FirstLBA=%d it needs to be moved to be aligned to %d" % (SectorsTillNextBoundary,FirstLBA,FirstLBA + SectorsTillNextBoundary))
+                    ##print "\tPhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB']=",PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB']
+                    FirstLBA += SectorsTillNextBoundary
+        else:
+            if PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB']>0:
+                print("\tThis partition is *NOT* aligned to a performance boundary\n")
+
         if HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']>0:
             SectorsTillNextBoundary = ReturnNumSectorsTillBoundary(FirstLBA,HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'])
 
         if PhyPartition[k][j]['readonly']=="true":
             ## to be here means this partition is read-only, so see if we need to move the start
             if FirstLBA <= hash_w[NumWPregions]["end_sector"]:
-                print "\tWe *don't* need to move FirstLBA (%d) since it's covered by the end of the current WP region (%d)" % (FirstLBA,hash_w[NumWPregions]["end_sector"])
+                print("\tWe *don't* need to move FirstLBA (%d) since it's covered by the end of the current WP region (%d)" % (FirstLBA,hash_w[NumWPregions]["end_sector"]))
                 pass
             else:
-                print "\tFirstLBA (%d) is *not* covered by the end of the WP region (%d),\n\tit needs to be moved to be aligned to %d" % (FirstLBA,hash_w[NumWPregions]["end_sector"],FirstLBA + SectorsTillNextBoundary)
+                print("\tFirstLBA (%d) is *not* covered by the end of the WP region (%d),\n\tit needs to be moved to be aligned to %d" % (FirstLBA,hash_w[NumWPregions]["end_sector"],FirstLBA + SectorsTillNextBoundary))
                 FirstLBA += SectorsTillNextBoundary
 
         else:
-            print "\n\tThis partition is *NOT* readonly"
+            print("\n\tThis partition is *NOT* readonly")
             ## to be here means this partition is writeable, so see if we need to move the start
             if FirstLBA <= hash_w[NumWPregions]["end_sector"]:
-                print "\tWe *need* to move FirstLBA (%d) since it's covered by the end of the current WP region (%d)" % (FirstLBA,hash_w[NumWPregions]["end_sector"])
-                print "\nhash_w[NumWPregions]['end_sector']=%i" % hash_w[NumWPregions]["end_sector"];
-                print "FirstLBA=%i\n" %FirstLBA;
+                print("\tWe *need* to move FirstLBA (%d) since it's covered by the end of the current WP region (%d)" % (FirstLBA,hash_w[NumWPregions]["end_sector"]))
+                print("\nhash_w[NumWPregions]['end_sector']=%i" % hash_w[NumWPregions]["end_sector"]);
+                print("FirstLBA=%i\n" %FirstLBA);
                 FirstLBA += SectorsTillNextBoundary
 
-                print "\tFirstLBA is now %d" % (FirstLBA)
+                print("\tFirstLBA is now %d" % (FirstLBA))
             else:
                 #print "Great, We *don't* need to move FirstLBA (%d) since it's *not* covered by the end of the current WP region (%d)" % (FirstLBA,hash_w[NumWPregions]["end_sector"])
                 pass
 
         if (j+1) == len(PhyPartition[k]):
-            print "\nTHIS IS THE *LAST* PARTITION"
+            print("\nTHIS IS THE *LAST* PARTITION")
 
-            if HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK']==True:
+            if HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK'] == True and gen_patch == True:
+
+                print("\nMeans patching instructions go here")
 
-                print "\nMeans patching instructions go here"
-    
                 PhyPartition[k][j]['size_in_kb']  = 0 # infinite huge
-                print "PhyPartition[k][j]['size_in_kb'] set to 0"
+                print("PhyPartition[k][j]['size_in_kb'] set to 0")
                 SectorsRemaining = BackupGPTNumLBAs
 
-                print "LastLBA=",LastLBA
-                print "FirstLBA=",FirstLBA
+                print("LastLBA=",LastLBA)
+                print("FirstLBA=",FirstLBA)
 
                 # gpt patch - size of last partition ################################################
                 #StartSector         = 2*512+40+j*128        ## i.e. skip sector 0 and 1, then it's offset
                 #ByteOffset          = str(StartSector%512)
                 #StartSector         = str(int(StartSector / 512))
-    
+
                 StartSector         = 40+j*128        ## i.e. skip sector 0 and 1, then it's offset
                 ByteOffset          = str(StartSector%SECTOR_SIZE_IN_BYTES)
                 StartSector         = str(2+int(StartSector / SECTOR_SIZE_IN_BYTES))
-                    
+
                 BackupStartSector   = 40+j*128
                 ByteOffset          = str(BackupStartSector%SECTOR_SIZE_IN_BYTES)
                 BackupStartSector   = int(BackupStartSector / SECTOR_SIZE_IN_BYTES)
-                    
+
                 ## gpt patch - main gpt partition array
                 UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % PrimaryGPTNumLBAs,os.path.basename(GPTMAIN),"Update last partition %d '%s' with actual size in Primary Header." % ((j+1),PhyPartition[k][j]['label']))
                 UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % PrimaryGPTNumLBAs,"DISK",              "Update last partition %d '%s' with actual size in Primary Header." % ((j+1),PhyPartition[k][j]['label']))
 
-                        
                 ## gpt patch - backup gpt partition array
                 UpdatePatch(str(BackupStartSector),    ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % PrimaryGPTNumLBAs,os.path.basename(GPTBACKUP),"Update last partition %d '%s' with actual size in Backup Header." % ((j+1),PhyPartition[k][j]['label']))
                 UpdatePatch("NUM_DISK_SECTORS-%d." % (BackupGPTNumLBAs-BackupStartSector),ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % PrimaryGPTNumLBAs,"DISK",                "Update last partition %d '%s' with actual size in Backup Header." % ((j+1),PhyPartition[k][j]['label']))
-	
+            elif HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK'] == True and gen_patch == False:
+                print("Ignoring GROW_LAST_PARTITION_TO_FILL_DISK because patching was disabled")
+
         LastLBA = FirstLBA + ConvertKBtoSectors( PhyPartition[k][j]['size_in_kb'] ) ## increase by num sectors, LastLBA inclusive, so add 1 for size
         LastLBA -= 1  # inclusive, meaning 0 to 3 is 4 sectors
 
         #import pdb; pdb.set_trace()
 
-        print "\n\tAt sector location %d with size %.2f MB (%d sectors) and LastLBA=%d (0x%X)" % (FirstLBA,PhyPartition[k][j]['size_in_kb']/1024.0,ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb']),LastLBA,LastLBA)
-        
+        print("\n\tAt sector location %d with size %.2f MB (%d sectors) and LastLBA=%d (0x%X)" % (FirstLBA,PhyPartition[k][j]['size_in_kb']/1024.0,ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb']),LastLBA,int(LastLBA)))
+
         if HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']>0:
             AlignedRemainder = FirstLBA % HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'];
             if AlignedRemainder==0:
-                print "\tWPB: This partition is ** ALIGNED ** to a %i KB boundary at sector %i (boundary %i)" % (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'],FirstLBA,FirstLBA/(ConvertKBtoSectors(HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'])))
+                print("\tWPB: This partition is ** ALIGNED ** to a %i KB boundary at sector %i (boundary %i)" % (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'],FirstLBA,FirstLBA/(ConvertKBtoSectors(HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']))))
 
         if PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB']>0:
             AlignedRemainder = FirstLBA % PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB'];
             if AlignedRemainder==0:
-                print "\t"+"-"*78
-                print "\tPERF: This partition is ** ALIGNED ** to a %i KB boundary at sector %i (boundary %i)" % (PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB'],FirstLBA,FirstLBA/(ConvertKBtoSectors(PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB'])))
-                print "\t"+"-"*78
+                print("\t"+"-"*78)
+                print("\tPERF: This partition is ** ALIGNED ** to a %i KB boundary at sector %i (boundary %i)" % (PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB'],FirstLBA,FirstLBA/(ConvertKBtoSectors(PhyPartition[k][j]['PERFORMANCE_BOUNDARY_IN_KB']))))
+                print("\t"+"-"*78)
 
         if PhyPartition[k][j]['readonly']=="true":
             UpdateWPhash(FirstLBA, ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb']))
@@ -617,22 +619,22 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
         #print "\tsize %i kB (%.2f MB)" % (PhyPartition[k][j]['size_in_kb'], PhyPartition[k][j]['size_in_kb']/1024)
 
         PartitionTypeGUID = PhyPartition[k][j]['type']
-        print "\nPartitionTypeGUID\t0x%X" % PartitionTypeGUID
+        print("\nPartitionTypeGUID\t0x%X" % PartitionTypeGUID)
 
         # If the partition is a multiple of 4, it must start on an LBA boundary of size SECTOR_SIZE_IN_BYTES
 #        if j%4==0 :
-#            # To be here means the partition number is a multiple of 4, so it must start on 
+#            # To be here means the partition number is a multiple of 4, so it must start on
 #            # an LBA boundary, i.e. LBA2, LBA3 etc.
 #            if i%SECTOR_SIZE_IN_BYTES > 0:
 #                print "\tWARNING: Location is %i, need to add %i to offset" % (i, SECTOR_SIZE_IN_BYTES-(i%SECTOR_SIZE_IN_BYTES))
 #                i += (SECTOR_SIZE_IN_BYTES-(i%SECTOR_SIZE_IN_BYTES))
-#            
+#
 #            print "\n==============================================================================="
-#	    print "This partition array entry (%i) is a multiple of 4 and must begin on a boundary of size %i bytes" % (j,SECTOR_SIZE_IN_BYTES)
+#       print "This partition array entry (%i) is a multiple of 4 and must begin on a boundary of size %i bytes" % (j,SECTOR_SIZE_IN_BYTES)
 #            print "This partition array entry is at LBA%i, absolute byte address %i (0x%X)" % (i/SECTOR_SIZE_IN_BYTES,i,i)
-#	    print "NOTE: LBA0 is protective MBR, LBA1 is Primary GPT Header, LBA2 beginning of Partition Array"
+#       print "NOTE: LBA0 is protective MBR, LBA1 is Primary GPT Header, LBA2 beginning of Partition Array"
 #            print "===============================================================================\n"
-        
+
         for b in range(16):
             PrimaryGPT[i] = ((PartitionTypeGUID>>(b*8)) & 0xFF) ; i+=1
 
@@ -640,17 +642,17 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
         if sequentialguid == 1:
             UniquePartitionGUID = j+1
         else:
-			if PhyPartition[k][j]['uguid'] != "false":
-				UniquePartitionGUID = PhyPartition[k][j]['uguid']
-			else:
-				UniquePartitionGUID = random.randint(0,2**(128))
-
-        print "UniquePartitionGUID\t0x%X" % UniquePartitionGUID
-        
-        
+            if PhyPartition[k][j]['uguid'] != "false":
+                UniquePartitionGUID = PhyPartition[k][j]['uguid']
+            else:
+                UniquePartitionGUID = random.randint(0,2**(128))
+
+        print("UniquePartitionGUID\t0x%X" % UniquePartitionGUID)
+
+
         # This HACK section is for verifying with GPARTED, allowing me to put in
         # whatever uniqueGUID that program came up with
-        
+
         #if j==0:
         #    UniquePartitionGUID = 0x373C17CF53BC7FB149B85A927ED24483
         #elif j==1:
@@ -659,19 +661,19 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
         #    UniquePartitionGUID = 0x04A9B2AAEF96DAAE465F429D0EF5C6E2
         #else:
         #    UniquePartitionGUID = 0x4D82D027725FD3AE46AF1C5A28944977
-            
+
         for b in range(16):
             PrimaryGPT[i] = ((UniquePartitionGUID>>(b*8)) & 0xFF) ; i+=1
 
         # First LBA
         for b in range(8):
-            PrimaryGPT[i] = ((FirstLBA>>(b*8)) & 0xFF) ; i+=1
+            PrimaryGPT[i] = ((int(FirstLBA)>>(b*8)) & 0xFF) ; i+=1
 
         # Last LBA
         for b in range(8):
-            PrimaryGPT[i] = ((LastLBA>>(b*8)) & 0xFF) ; i+=1
-        
-        print "**** FirstLBA=%d and LastLBA=%d and size is %i sectors" % (FirstLBA,LastLBA,LastLBA-FirstLBA+1)
+            PrimaryGPT[i] = ((int(LastLBA)>>(b*8)) & 0xFF) ; i+=1
+
+        print("**** FirstLBA=%d and LastLBA=%d and size is %i sectors" % (FirstLBA,LastLBA,LastLBA-FirstLBA+1))
 
         # Attributes
         Attributes = 0x0
@@ -690,17 +692,17 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
         if PhyPartition[k][j]['priority']>0:
             Attributes |= PhyPartition[k][j]['priority']<<48
 
-        print "Attributes\t\t0x%X" % Attributes
+        print("Attributes\t\t0x%X" % Attributes)
 
         ##import pdb; pdb.set_trace()
-            
+
         for b in range(8):
             PrimaryGPT[i] = ((Attributes>>(b*8)) & 0xFF) ; i+=1
 
         if len(PhyPartition[k][j]['label'])>36:
-            print "Label %s is more than 36 characters, therefore it's truncated" % PhyPartition[k][j]['label']
+            print("Label %s is more than 36 characters, therefore it's truncated" % PhyPartition[k][j]['label'])
             PhyPartition[k][j]['label'] = PhyPartition[k][j]['label'][0:36]
-            
+
         #print "LABEL %s and i=%i" % (PhyPartition[k][j]['label'],i)
         # Partition Name
         for b in PhyPartition[k][j]['label']:
@@ -710,7 +712,7 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
         for b in range(36-len(PhyPartition[k][j]['label'])):
             PrimaryGPT[i] = 0x00 ; i+=1
             PrimaryGPT[i] = 0x00 ; i+=1
-        
+
         #for b in range(2):
         #    PrimaryGPT[i] = 0x00 ; i+=1
         #for b in range(70):
@@ -719,7 +721,7 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
         ##FileToProgram   = ""
         ##FileOffset      = 0
         PartitionLabel  = ""
-        
+
         ## Default for each partition is no file
         FileToProgram           = [""]
         FileOffset              = [0]
@@ -731,14 +733,14 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
             ##print "filename exists"
             #print PhyPartition[k][j]['filename']
             #print FileToProgram[0]
-            
-	    # These are all the default values that should be there, including an empty string possibly for filename
+
+        # These are all the default values that should be there, including an empty string possibly for filename
             FileToProgram[0]            = PhyPartition[k][j]['filename'][0]
             FileOffset[0]               = PhyPartition[k][j]['fileoffset'][0]
             FilePartitionOffset[0]      = PhyPartition[k][j]['filepartitionoffset'][0]
             FileAppsbin[0]              = PhyPartition[k][j]['appsbin'][0]
             FileSparse[0]               = PhyPartition[k][j]['sparse'][0]
-            
+
             for z in range(1,len(PhyPartition[k][j]['filename'])):
                 FileToProgram.append( PhyPartition[k][j]['filename'][z] )
                 FileOffset.append( PhyPartition[k][j]['fileoffset'][z] )
@@ -747,19 +749,19 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
                 FileSparse.append( PhyPartition[k][j]['sparse'][z] )
 
             #print PhyPartition[k][j]['fileoffset']
-            
+
 
         #for z in range(len(FileToProgram)):
         #    print "FileToProgram[",z,"]=",FileToProgram[z]
         #    print "FileOffset[",z,"]=",FileOffset[z]
         #    print " "
-        
+
 
         if 'label' in PhyPartition[k][j]:
             PartitionLabel = PhyPartition[k][j]['label']
 
         for z in range(len(FileToProgram)):
-	    #print "===============================%i of %i===========================================" % (z,len(FileToProgram))
+        #print "===============================%i of %i===========================================" % (z,len(FileToProgram))
             #print "File: ",FileToProgram[z]
             #print "Label: ",FileToProgram[z]
             #print "FilePartitionOffset[z]=",FilePartitionOffset[z]
@@ -806,7 +808,7 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
 
             if j==0:
                 UpdateRawProgram(RawProgramXML_Blank,0, 33*SECTOR_SIZE_IN_BYTES/1024.0, PhysicalPartitionNumber, FileOffset[z], 33, "gpt_empty%d.bin" % k, "false", "PrimaryGPT", "false", "false")
-	    
+
 
         LastLBA += 1    ## move to the next free sector, also, 0 to 9 inclusive means it's 10
                         ## so below (LastLBA-FirstLBA) must = 10
@@ -842,13 +844,20 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
     ## Signature and Revision and HeaderSize i.e. "EFI PART" and 00 00 01 00 and 5C 00 00 00
     PrimaryGPT[i:i+16] = [0x45, 0x46, 0x49, 0x20, 0x50, 0x41, 0x52, 0x54, 0x00, 0x00, 0x01, 0x00, 0x5C, 0x00, 0x00, 0x00] ; i+=16
 
+    header_crc_offset = i
     PrimaryGPT[i:i+4] = [0x00, 0x00, 0x00, 0x00]    ; i+=4  ## CRC is zeroed out till calculated later
     PrimaryGPT[i:i+4] = [0x00, 0x00, 0x00, 0x00]    ; i+=4  ## Reserved, set to 0
 
-    CurrentLBA= 1                                       ;   i = UpdatePrimaryGPT(CurrentLBA,8,i)
-    BackupLBA = 0                                       ;   i = UpdatePrimaryGPT(BackupLBA,8,i)
-    FirstLBA  = len(PrimaryGPT)/SECTOR_SIZE_IN_BYTES    ;   i = UpdatePrimaryGPT(FirstLBA,8,i)
-    LastLBA   = 0                                       ;   i = UpdatePrimaryGPT(LastLBA,8,i)
+    # Update the field that says the LBA of the header, for Primary it is always 1.
+    i = UpdatePrimaryGPT(1,8,i)
+    LastUseableLBA = LastLBA - 1;
+    BackupLBA = LastUseableLBA + BackupGPTNumLBAs
+    print("BackupLBA {0} = LastUseableLBA {1} + BackupGPTNumLBAs {2}".format(    BackupLBA, LastUseableLBA , BackupGPTNumLBAs))
+    #Update GPT Backup LBA, this field may be updated by patching.
+    i = UpdatePrimaryGPT(BackupLBA,8,i)
+    FirstLBA  = PrimaryGPTNumLBAs
+    i = UpdatePrimaryGPT(FirstLBA,8,i)
+    i = UpdatePrimaryGPT(LastUseableLBA,8,i)
 
     ##print "\n\nBackup GPT is at sector %i" % BackupLBA
     ##print "Last Usable LBA is at sector %i" % (LastLBA)
@@ -856,146 +865,144 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
     DiskGUID = random.randint(0,2**(128))
     i = UpdatePrimaryGPT(DiskGUID,16,i)
 
-    PartitionsLBA = 2                       ;   i = UpdatePrimaryGPT(PartitionsLBA,8,i)
+    PartitionsLBA = 2
+    i = UpdatePrimaryGPT(PartitionsLBA,8,i)
+
     NumPartitions = (SECTOR_SIZE_IN_BYTES/128)*int(len(PhyPartition[k])/(SECTOR_SIZE_IN_BYTES/128))  # Want a multiple of (SECTOR_SIZE_IN_BYTES) to fill the sector (avoids gdisk warning)
     if (len(PhyPartition[k])%(SECTOR_SIZE_IN_BYTES/128))>0:
         NumPartitions+=(SECTOR_SIZE_IN_BYTES/128)
 
     if force128partitions == 1:
-        print "\n\nGPT table will list 128 partitions instead of ",NumPartitions
-        print "This makes the output compatible with some older test utilities"
+        print("\n\nGPT table will list 128 partitions instead of ",NumPartitions)
+        print("This makes the output compatible with some older test utilities")
         NumPartitions = 128
 
     i = UpdatePrimaryGPT(NumPartitions,4,i) ## (offset 80) Number of partition entries
     ##NumPartitions = 8    ;   i = UpdatePrimaryGPT(NumPartitions,4,i) ## (offset 80) Number of partition entries
-    SizeOfPartitionArray = 128              ;   i = UpdatePrimaryGPT(SizeOfPartitionArray,4,i) ## (offset 84) Size of partition entries
+    SizeOfPartitionArray = 128
+    i = UpdatePrimaryGPT(SizeOfPartitionArray,4,i) ## (offset 84) Size of partition entries
 
     ## Now I can calculate the partitions CRC
-    print "\n\nCalculating CRC with NumPartitions=%i, SizeOfPartitionArray=%i (bytes each) TOTAL LENGTH %d" % (NumPartitions,SizeOfPartitionArray,NumPartitions*SizeOfPartitionArray);
+    print("\n\nCalculating CRC with NumPartitions=%i, SizeOfPartitionArray=%i (bytes each) TOTAL LENGTH %d" % (NumPartitions,SizeOfPartitionArray,NumPartitions*SizeOfPartitionArray));
     ##PartitionsCRC = CalcCRC32(PrimaryGPT[1024:],NumPartitions*SizeOfPartitionArray)  ## Each partition entry is 128 bytes
 
 
     PartitionsPerSector = SECTOR_SIZE_IN_BYTES/128  ## 128 bytes per partition
 
     if NumPartitions>PartitionsPerSector:
-        SectorsToCalculateCRCOver = NumPartitions/PartitionsPerSector 
+        SectorsToCalculateCRCOver = NumPartitions/PartitionsPerSector
         if NumPartitions%PartitionsPerSector:
             SectorsToCalculateCRCOver+=1
     else:
         SectorsToCalculateCRCOver = 1
 
     PartitionsCRC = CalcCRC32(PrimaryGPT[(2*SECTOR_SIZE_IN_BYTES):],SectorsToCalculateCRCOver * SECTOR_SIZE_IN_BYTES)  ## NAND HACK
-
-    
     i = UpdatePrimaryGPT(PartitionsCRC,4,i)
-    print "\n\nCalculated PARTITION CRC is 0x%.8X" % PartitionsCRC
-
-    ## gpt patch - main gpt header - last useable lba                    
-    ByteOffset          = str(48)
-    StartSector         = str(1)
-    BackupStartSector   = str(BackupGPTNumLBAs-1)  ## Want last sector    ##str(32)
-    UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % PrimaryGPTNumLBAs,os.path.basename(GPTMAIN), "Update Primary Header with LastUseableLBA.")
-    UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % PrimaryGPTNumLBAs,"DISK",               "Update Primary Header with LastUseableLBA.")
-    
-    UpdatePatch(BackupStartSector,ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % PrimaryGPTNumLBAs,os.path.basename(GPTBACKUP), "Update Backup Header with LastUseableLBA.")
-    UpdatePatch("NUM_DISK_SECTORS-1.",ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % PrimaryGPTNumLBAs,"DISK",             "Update Backup Header with LastUseableLBA.")
-    
-    # gpt patch - location of backup gpt header ##########################################
-    ByteOffset          = str(32)
-    StartSector         = str(1)
-    ## gpt patch - main gpt header
-    UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-1.",os.path.basename(GPTMAIN), "Update Primary Header with BackupGPT Header Location.")
-    UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-1.","DISK",               "Update Primary Header with BackupGPT Header Location.")
-
-    # gpt patch - currentLBA backup header ##########################################
-    ByteOffset          = str(24)
-    BackupStartSector   = str(BackupGPTNumLBAs-1)  ## Want last sector    ##str(32)
-    ## gpt patch - main gpt header
-    UpdatePatch(BackupStartSector,    ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-1.",os.path.basename(GPTBACKUP), "Update Backup Header with CurrentLBA.")
-    UpdatePatch("NUM_DISK_SECTORS-1.",ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-1.","DISK",                 "Update Backup Header with CurrentLBA.")
-
-    # gpt patch - location of backup gpt header ##########################################
-    ByteOffset          = str(72)
-    BackupStartSector   = str(BackupGPTNumLBAs-1)  ## Want last sector    ##str(32)
-    
-    ## gpt patch - main gpt header
-    UpdatePatch(BackupStartSector,   ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % BackupGPTNumLBAs,os.path.basename(GPTBACKUP), "Update Backup Header with Partition Array Location.")
-    UpdatePatch("NUM_DISK_SECTORS-1",ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % BackupGPTNumLBAs,"DISK",                 "Update Backup Header with Partition Array Location.")
+    print("\n\nCalculated PARTITION CRC is 0x%.8X" % PartitionsCRC)
 
-    # gpt patch - Partition Array CRC ################################################
-    ByteOffset          = str(88)
-    StartSector         = str(1)
-    BackupStartSector   = str(BackupGPTNumLBAs-1)  ## Want last sector    ##str(32)
-
-    ## gpt patch - main gpt header
-    UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,4,"CRC32(2,%d)" % (NumPartitions*SizeOfPartitionArray),os.path.basename(GPTMAIN), "Update Primary Header with CRC of Partition Array.") # CRC32(start_sector:num_bytes)
-    UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,4,"CRC32(2,%d)" % (NumPartitions*SizeOfPartitionArray),"DISK",               "Update Primary Header with CRC of Partition Array.") # CRC32(start_sector:num_bytes)
-
-    ## gpt patch - backup gpt header
-    UpdatePatch(BackupStartSector,    ByteOffset,PhysicalPartitionNumber,4,"CRC32(0,%d)" % (NumPartitions*SizeOfPartitionArray),os.path.basename(GPTBACKUP), "Update Backup Header with CRC of Partition Array.")   # CRC32(start_sector:num_bytes)
-    UpdatePatch("NUM_DISK_SECTORS-1.",ByteOffset,PhysicalPartitionNumber,4,"CRC32(NUM_DISK_SECTORS-%d.,%d)" % (BackupGPTNumLBAs,NumPartitions*SizeOfPartitionArray),"DISK",                 "Update Backup Header with CRC of Partition Array.")   # CRC32(start_sector:num_bytes)
-
-    #print "\nNeed to patch PARTITION ARRAY, @ sector 1, byte offset 88, size=4 bytes, CRC32(2,33)"
-    #print "\nNeed to patch PARTITION ARRAY, @ sector -1, byte offset 88, size=4 bytes, CRC32(2,33)"
-
-    ## Now I can calculate the Header CRC
-    ##print "\nCalculating CRC for Primary Header"
+    #Compute the CRC over the header.
     CalcHeaderCRC = CalcCRC32(PrimaryGPT[SECTOR_SIZE_IN_BYTES:],92)
     UpdatePrimaryGPT(CalcHeaderCRC,4,SECTOR_SIZE_IN_BYTES+16)
-    #print "\n\nCalculated HEADER CRC is 0x%.8X" % CalcHeaderCRC
 
-    #print "\nNeed to patch GPT HEADERS in 2 places"
-    #print "\nNeed to patch CRC HEADER, @ sector 1, byte offset 16, size=4 bytes, CRC32(1,1)"
-    #print "\nNeed to patch CRC HEADER, @ sector -1, byte offset 16, size=4 bytes, CRC32(1,1)"
+
+    if gen_patch == True:
+        ## gpt patch - main gpt header - last useable lba
+        ByteOffset          = str(48)
+        StartSector         = str(1)
+        BackupStartSector   = str(BackupGPTNumLBAs-1)  ## Want last sector    ##str(32)
+        UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % PrimaryGPTNumLBAs,os.path.basename(GPTMAIN), "Update Primary Header with LastUseableLBA.")
+        UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % PrimaryGPTNumLBAs,"DISK",               "Update Primary Header with LastUseableLBA.")
+        UpdatePatch(BackupStartSector,ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % PrimaryGPTNumLBAs,os.path.basename(GPTBACKUP), "Update Backup Header with LastUseableLBA.")
+        UpdatePatch("NUM_DISK_SECTORS-1.",ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % PrimaryGPTNumLBAs,"DISK",             "Update Backup Header with LastUseableLBA.")
+
+        # gpt patch - location of backup gpt header ##########################################
+        ByteOffset          = str(32)
+        StartSector         = str(1)
+        ## gpt patch - main gpt header
+        UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-1.",os.path.basename(GPTMAIN), "Update Primary Header with BackupGPT Header Location.")
+        UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-1.","DISK",               "Update Primary Header with BackupGPT Header Location.")
+
+        # gpt patch - currentLBA backup header ##########################################
+        ByteOffset          = str(24)
+        BackupStartSector   = str(BackupGPTNumLBAs-1)  ## Want last sector    ##str(32)
+        ## gpt patch - main gpt header
+        UpdatePatch(BackupStartSector,    ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-1.",os.path.basename(GPTBACKUP), "Update Backup Header with CurrentLBA.")
+        UpdatePatch("NUM_DISK_SECTORS-1.",ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-1.","DISK",                 "Update Backup Header with CurrentLBA.")
+
+        # gpt patch - location of backup gpt header ##########################################
+        ByteOffset          = str(72)
+        BackupStartSector   = str(BackupGPTNumLBAs-1)  ## Want last sector    ##str(32)
+
+        ## gpt patch - main gpt header
+        UpdatePatch(BackupStartSector,   ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % BackupGPTNumLBAs,os.path.basename(GPTBACKUP), "Update Backup Header with Partition Array Location.")
+        UpdatePatch("NUM_DISK_SECTORS-1",ByteOffset,PhysicalPartitionNumber,8,"NUM_DISK_SECTORS-%d." % BackupGPTNumLBAs,"DISK",                 "Update Backup Header with Partition Array Location.")
+
+        # gpt patch - Partition Array CRC ################################################
+        ByteOffset          = str(88)
+        StartSector         = str(1)
+        BackupStartSector   = str(BackupGPTNumLBAs-1)  ## Want last sector    ##str(32)
+
+        ## gpt patch - main gpt header
+        # Add some patch tag that does nothing to keep XML parsers happy.
+        UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,4,"CRC32(2,%d)" % (NumPartitions*SizeOfPartitionArray),os.path.basename(GPTMAIN), "Update Primary Header with CRC of Partition Array.") # CRC32(start_sector:num_bytes)
+        UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,4,"CRC32(2,%d)" % (NumPartitions*SizeOfPartitionArray),"DISK",               "Update Primary Header with CRC of Partition Array.") # CRC32(start_sector:num_bytes)
+
+        ## gpt patch - backup gpt header
+        UpdatePatch(BackupStartSector,    ByteOffset,PhysicalPartitionNumber,4,"CRC32(0,%d)" % (NumPartitions*SizeOfPartitionArray),os.path.basename(GPTBACKUP), "Update Backup Header with CRC of Partition Array.")   # CRC32(start_sector:num_bytes)
+        UpdatePatch("NUM_DISK_SECTORS-1.",ByteOffset,PhysicalPartitionNumber,4,"CRC32(NUM_DISK_SECTORS-%d.,%d)" % (BackupGPTNumLBAs,NumPartitions*SizeOfPartitionArray),"DISK",                 "Update Backup Header with CRC of Partition Array.")   # CRC32(start_sector:num_bytes)
+
 
     # gpt patch - Header CRC ################################################
     ByteOffset          = str(16)
     StartSector         = str(1)
     BackupStartSector   = str(BackupGPTNumLBAs-1)  ## Want last sector    ##str(32)
-
+    # Add some PATCH entries that have no effect in programming to keep XML parser happy, since they expect to see a <patch
     ## gpt patch - main gpt header
     UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,4,"0",os.path.basename(GPTMAIN), "Zero Out Header CRC in Primary Header.")      # zero out old CRC first
     UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,4,"CRC32(1,92)",os.path.basename(GPTMAIN), "Update Primary Header with CRC of Primary Header.") # CRC32(start_sector:num_bytes)
-    
-    UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,4,"0",          "DISK", "Zero Out Header CRC in Primary Header.")      # zero out old CRC first
-    UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,4,"CRC32(1,92)","DISK", "Update Primary Header with CRC of Primary Header.") # CRC32(start_sector:num_bytes)
+    if gen_patch == True:
+        UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,4,"0",          "DISK", "Zero Out Header CRC in Primary Header.")      # zero out old CRC first
+        UpdatePatch(StartSector,ByteOffset,PhysicalPartitionNumber,4,"CRC32(1,92)","DISK", "Update Primary Header with CRC of Primary Header.") # CRC32(start_sector:num_bytes)
+
+        ## gpt patch - backup gpt header
+        #import pdb; pdb.set_trace()
+        UpdatePatch(BackupStartSector,ByteOffset,PhysicalPartitionNumber,4,"0",os.path.basename(GPTBACKUP), "Zero Out Header CRC in Backup Header.")      # zero out old CRC first
+        UpdatePatch(BackupStartSector,ByteOffset,PhysicalPartitionNumber,4,"CRC32(%s,92)" % BackupStartSector,os.path.basename(GPTBACKUP), "Update Backup Header with CRC of Backup Header.")  # CRC32(start_sector:num_bytes)
+
+        UpdatePatch("NUM_DISK_SECTORS-1.",ByteOffset,PhysicalPartitionNumber,4,"0",           "DISK", "Zero Out Header CRC in Backup Header.")      # zero out old CRC first
+        UpdatePatch("NUM_DISK_SECTORS-1.",ByteOffset,PhysicalPartitionNumber,4,"CRC32(NUM_DISK_SECTORS-1.,92)","DISK", "Update Backup Header with CRC of Backup Header.")  # CRC32(start_sector:num_bytes)
 
-    ## gpt patch - backup gpt header
-    #import pdb; pdb.set_trace()
-    UpdatePatch(BackupStartSector,ByteOffset,PhysicalPartitionNumber,4,"0",os.path.basename(GPTBACKUP), "Zero Out Header CRC in Backup Header.")      # zero out old CRC first
-    UpdatePatch(BackupStartSector,ByteOffset,PhysicalPartitionNumber,4,"CRC32(%s,92)" % BackupStartSector,os.path.basename(GPTBACKUP), "Update Backup Header with CRC of Backup Header.")  # CRC32(start_sector:num_bytes)
-    
-    UpdatePatch("NUM_DISK_SECTORS-1.",ByteOffset,PhysicalPartitionNumber,4,"0",           "DISK", "Zero Out Header CRC in Backup Header.")      # zero out old CRC first
-    UpdatePatch("NUM_DISK_SECTORS-1.",ByteOffset,PhysicalPartitionNumber,4,"CRC32(NUM_DISK_SECTORS-1.,92)","DISK", "Update Backup Header with CRC of Backup Header.")  # CRC32(start_sector:num_bytes)
-    
     ## now create the backup GPT partitions
-    BackupGPT       = [0xFF]*(BackupGPTNumLBAs*SECTOR_SIZE_IN_BYTES)
+    BackupGPT       = [0xFF]*(int(BackupGPTNumLBAs)*SECTOR_SIZE_IN_BYTES)
     BackupGPT[0:]   = PrimaryGPT[2*SECTOR_SIZE_IN_BYTES:]
 
     ## now create the backup GPT header
 
-    BackupGPT[(BackupGPTNumLBAs-1)*SECTOR_SIZE_IN_BYTES:BackupGPTNumLBAs*SECTOR_SIZE_IN_BYTES]= PrimaryGPT[1*SECTOR_SIZE_IN_BYTES:2*SECTOR_SIZE_IN_BYTES] ##BackupGPTNumLBAs=33
+    BackupGPT[int(BackupGPTNumLBAs-1)*SECTOR_SIZE_IN_BYTES:int(BackupGPTNumLBAs)*SECTOR_SIZE_IN_BYTES]= PrimaryGPT[1*SECTOR_SIZE_IN_BYTES:2*SECTOR_SIZE_IN_BYTES] ##BackupGPTNumLBAs=33
     #ShowBackupGPT(32)
 
     ## Need to update CurrentLBA, BackupLBA and then recalc CRC for this header
+    i = int(BackupGPTNumLBAs-1)*SECTOR_SIZE_IN_BYTES+8+4+4
+    i = UpdateBackupGPT(0, 4, i)  ## zero out CRC for the header, will be computed later.
+    i = UpdateBackupGPT(0, 4, i)  ## reserved 4 zeros
 
-    i = (BackupGPTNumLBAs-1)*SECTOR_SIZE_IN_BYTES+8+4+4
-    CalcHeaderCRC   = 0     ;   i = UpdateBackupGPT(CalcHeaderCRC,4,i)  ## zero out CRC
-    CalcHeaderCRC   = 0     ;   i = UpdateBackupGPT(CalcHeaderCRC,4,i)  ## reserved 4 zeros
-    CurrentLBA      = 0     ;   i = UpdateBackupGPT(CurrentLBA,8,i)
-    BackupLBA       = 1     ;   i = UpdateBackupGPT(BackupLBA,8,i)
+    # Update the field that says the LBA of this header.
+    i = UpdateBackupGPT(BackupLBA,8,i)
+    # Update the field that says the LBA of the other header.
+    i = UpdateBackupGPT(1,8,i)
 
     #print "\n\nBackup GPT is at sector %i" % CurrentLBA
     #print "Last Usable LBA is at sector %i" % (CurrentLBA-33)
 
     i += 8+8+16
-    PartitionsLBA   = 0     ;   i = UpdateBackupGPT(PartitionsLBA,8,i)
+    BackupTableLBA = BackupLBA - BackupGPTNumLBAs + 1
+    i = UpdateBackupGPT(BackupTableLBA, 8, i)
     #print "PartitionsLBA = %d (0x%X)" % (PartitionsLBA,PartitionsLBA)
 
     ##print "\nCalculating CRC for Backup Header"
-    CalcHeaderCRC = CalcCRC32(BackupGPT[(BackupGPTNumLBAs-1)*SECTOR_SIZE_IN_BYTES:],92)
+    CalcHeaderCRC = CalcCRC32(BackupGPT[int(BackupGPTNumLBAs-1)*SECTOR_SIZE_IN_BYTES:],92)
     #print "\nCalcHeaderCRC of BackupGPT is 0x%.8X" % CalcHeaderCRC
-    i = (BackupGPTNumLBAs-1)*SECTOR_SIZE_IN_BYTES+8+4+4
+    i = int(BackupGPTNumLBAs-1)*SECTOR_SIZE_IN_BYTES+8+4+4
     i = UpdateBackupGPT(CalcHeaderCRC,4,i)  ## zero out CRC
 
     #ShowBackupGPT(32)
@@ -1003,13 +1010,15 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
     UpdateRawProgram(RawProgramXML,0,       PrimaryGPTNumLBAs*SECTOR_SIZE_IN_BYTES/1024.0, PhysicalPartitionNumber, 0, PrimaryGPTNumLBAs, os.path.basename(GPTMAIN), 'false', 'PrimaryGPT','false','true')
     UpdateRawProgram(RawProgramXML_Wipe,0,  1*SECTOR_SIZE_IN_BYTES/1024.0, PhysicalPartitionNumber, 0,  1, "zeros_33sectors.bin", 'false', 'PrimaryGPT','false','true')
     UpdateRawProgram(RawProgramXML_Wipe,1, BackupGPTNumLBAs*SECTOR_SIZE_IN_BYTES/1024.0, PhysicalPartitionNumber, 0, BackupGPTNumLBAs, "zeros_%dsectors.bin" % BackupGPTNumLBAs, 'false', 'PrimaryGPT','false','true')
-                             
+
     #print "szStartSector=%s" % szStartSector
 
-    UpdateRawProgram(RawProgramXML,-BackupGPTNumLBAs,       BackupGPTNumLBAs*SECTOR_SIZE_IN_BYTES/1024.0, PhysicalPartitionNumber, 0, BackupGPTNumLBAs, os.path.basename(GPTBACKUP), 'false', 'BackupGPT','false','true')
-    UpdateRawProgram(RawProgramXML_Wipe,-BackupGPTNumLBAs, BackupGPTNumLBAs*SECTOR_SIZE_IN_BYTES/1024.0, PhysicalPartitionNumber, 0, BackupGPTNumLBAs, "zeros_%dsectors.bin" % BackupGPTNumLBAs, 'false', 'BackupGPT','false','true')
-    
+    start_gpt_backup_lba = -BackupGPTNumLBAs
+    if gen_patch == False:
+        start_gpt_backup_lba = BackupTableLBA
 
+    UpdateRawProgram(RawProgramXML,start_gpt_backup_lba,       BackupGPTNumLBAs*SECTOR_SIZE_IN_BYTES/1024.0, PhysicalPartitionNumber, 0, BackupGPTNumLBAs, os.path.basename(GPTBACKUP), 'false', 'BackupGPT','false','true')
+    UpdateRawProgram(RawProgramXML_Wipe,start_gpt_backup_lba, BackupGPTNumLBAs*SECTOR_SIZE_IN_BYTES/1024.0, PhysicalPartitionNumber, 0, BackupGPTNumLBAs, "zeros_%dsectors.bin" % BackupGPTNumLBAs, 'false', 'BackupGPT','false','true')
     ##print "szStartSector=%s" % szStartSector
 
 
@@ -1018,22 +1027,22 @@ def CreateGPTPartitionTable(PhysicalPartitionNumber,UserProvided=False):
     opfile = open(RAW_PROGRAM, "w")
     opfile.write( prettify(RawProgramXML) )
     opfile.close()
-    print "\nCreated \"%s\"\t\t\t<-- YOUR partition information is HERE" % RAW_PROGRAM
+    print("\nCreated \"%s\"\t\t\t<-- YOUR partition information is HERE" % RAW_PROGRAM)
 
     opfile = open(RAW_PROGRAM_WIPE_PARTITIONS, "w")
     opfile.write( prettify(RawProgramXML_Wipe) )
     opfile.close()
-    print "Created \"%s\"\t<-- Wipe out your images with this file (if needed for testing)" % RAW_PROGRAM_WIPE_PARTITIONS
-    
+    print("Created \"%s\"\t<-- Wipe out your images with this file (if needed for testing)" % RAW_PROGRAM_WIPE_PARTITIONS)
+
     opfile = open(RAW_PROGRAM_BLANK_GPT, "w")
     opfile.write( prettify(RawProgramXML_Blank) )
     opfile.close()
-    print "Created \"%s\"\t\t<-- Valid empty GPT partition table (to force to EDL)" % RAW_PROGRAM_BLANK_GPT
+    print("Created \"%s\"\t\t<-- Valid empty GPT partition table (to force to EDL)" % RAW_PROGRAM_BLANK_GPT)
 
     opfile = open(PATCHES, "w")             # gpt
     opfile.write( prettify(PatchesXML) )
     opfile.close()
-    print "Created \"%s\"\t\t\t\t<-- Tailor your partition tables to YOUR device with this file\n" % PATCHES
+    print("Created \"%s\"\t\t\t\t<-- Tailor your partition tables to YOUR device with this file\n" % PATCHES)
 
 
 
@@ -1051,11 +1060,10 @@ def ReturnArrayFromSpaceSeparatedList(sz):
 def ParseXML(XMLFile):
     global OutputToCreate,NumPhyPartitions, PartitionCollection, PhyPartition,MinSectorsNeeded,SECTOR_SIZE_IN_BYTES
 
-
     root = ET.parse( XMLFile )
 
     #Create an iterator
-    iter = root.getiterator()
+    iter = list(root.iter())
 
     for element in iter:
         #print "\nElement:" , element.tag   # thins like image,primary,extended etc
@@ -1073,7 +1081,7 @@ def ParseXML(XMLFile):
     if 'SECTOR_SIZE_IN_BYTES' in HashInstructions:
         if type(HashInstructions['SECTOR_SIZE_IN_BYTES']) is str:
             m = re.search("^(\d+)$", HashInstructions['SECTOR_SIZE_IN_BYTES'])
-            if type(m) is NoneType:
+            if m is None:
                 ## we didn't match, so assign deafult
                 HashInstructions['SECTOR_SIZE_IN_BYTES'] = 512
                 SECTOR_SIZE_IN_BYTES = 512
@@ -1082,9 +1090,9 @@ def ParseXML(XMLFile):
                 SECTOR_SIZE_IN_BYTES = HashInstructions['SECTOR_SIZE_IN_BYTES']
 
                 PrintBigWarning("WARNING: SECTOR_SIZE_IN_BYTES CHANGED <-- This may impact your targets ability to read the partition tables!!")
-                print "\n\nWARNING: SECTOR_SIZE_IN_BYTES *changed* from 512bytes/sector to %ibytes/sector" % SECTOR_SIZE_IN_BYTES
-                print "WARNING: SECTOR_SIZE_IN_BYTES *changed* from 512bytes/sector to %ibytes/sector" % SECTOR_SIZE_IN_BYTES
-                print "WARNING: SECTOR_SIZE_IN_BYTES *changed* from 512bytes/sector to %ibytes/sector\n\n" % SECTOR_SIZE_IN_BYTES
+                print("\n\nWARNING: SECTOR_SIZE_IN_BYTES *changed* from 512bytes/sector to %ibytes/sector" % SECTOR_SIZE_IN_BYTES)
+                print("WARNING: SECTOR_SIZE_IN_BYTES *changed* from 512bytes/sector to %ibytes/sector" % SECTOR_SIZE_IN_BYTES)
+                print("WARNING: SECTOR_SIZE_IN_BYTES *changed* from 512bytes/sector to %ibytes/sector\n\n" % SECTOR_SIZE_IN_BYTES)
                 sleep(2)
     else:
         #print "SECTOR_SIZE_IN_BYTES does not exist"
@@ -1094,7 +1102,7 @@ def ParseXML(XMLFile):
     if 'WRITE_PROTECT_BOUNDARY_IN_KB' in HashInstructions:
         if type(HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']) is str:
             m = re.search("^(\d+)$", HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'])
-            if type(m) is NoneType:
+            if m is None:
                 ## we didn't match, so assign deafult
                 HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'] = 0
             else:
@@ -1106,7 +1114,7 @@ def ParseXML(XMLFile):
     if 'PERFORMANCE_BOUNDARY_IN_KB' in HashInstructions:
         if type(HashInstructions['PERFORMANCE_BOUNDARY_IN_KB']) is str:
             m = re.search("^(\d+)$", HashInstructions['PERFORMANCE_BOUNDARY_IN_KB'])
-            if type(m) is NoneType:
+            if m is None:
                 ## we didn't match, so assign deafult
                 HashInstructions['PERFORMANCE_BOUNDARY_IN_KB'] = 0
             else:
@@ -1119,7 +1127,7 @@ def ParseXML(XMLFile):
         if type(HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK']) is str:
             m = re.search("^(true)$", HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK'] ,re.IGNORECASE)
             #print type(m)
-            if type(m) is NoneType:
+            if m is None:
                 HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK'] = False    # no match
                 #print "assigned false"
             else:
@@ -1132,7 +1140,7 @@ def ParseXML(XMLFile):
         if type(HashInstructions['WRITE_PROTECT_GPT_PARTITION_TABLE']) is str:
             m = re.search("^(true)$", HashInstructions['WRITE_PROTECT_GPT_PARTITION_TABLE'] ,re.IGNORECASE)
             #print type(m)
-            if type(m) is NoneType:
+            if m is None:
                 HashInstructions['WRITE_PROTECT_GPT_PARTITION_TABLE'] = False    # no match
                 #print "assigned false"
             else:
@@ -1145,7 +1153,7 @@ def ParseXML(XMLFile):
         if type(HashInstructions['ALIGN_PARTITIONS_TO_PERFORMANCE_BOUNDARY']) is str:
             m = re.search("^(true)$", HashInstructions['ALIGN_PARTITIONS_TO_PERFORMANCE_BOUNDARY'] ,re.IGNORECASE)
             #print type(m)
-            if type(m) is NoneType:
+            if m is None:
                 HashInstructions['ALIGN_PARTITIONS_TO_PERFORMANCE_BOUNDARY'] = False    # no match
                 #print "assigned false"
             else:
@@ -1158,7 +1166,7 @@ def ParseXML(XMLFile):
         if type(HashInstructions['USE_GPT_PARTITIONING']) is str:
             m = re.search("^(true)$", HashInstructions['USE_GPT_PARTITIONING'] ,re.IGNORECASE)
             #print type(m)
-            if type(m) is NoneType:
+            if m is None:
                 HashInstructions['USE_GPT_PARTITIONING'] = False    # no match
                 #print "assigned false"
             else:
@@ -1171,19 +1179,19 @@ def ParseXML(XMLFile):
     if 'DISK_SIGNATURE' in HashInstructions:
         if type(HashInstructions['DISK_SIGNATURE']) is str:
             m = re.search("^0x([\da-fA-F]+)$", HashInstructions['DISK_SIGNATURE'])
-            if type(m) is NoneType:
-                print "WARNING: DISK_SIGNATURE is not formed correctly, expected format is 0x12345678\n"
+            if m is None:
+                print("WARNING: DISK_SIGNATURE is not formed correctly, expected format is 0x12345678\n")
                 HashInstructions['DISK_SIGNATURE'] = 0x00000000
             else:
                 HashInstructions['DISK_SIGNATURE'] = int(HashInstructions['DISK_SIGNATURE'],16)
     else:
-        print "DISK_SIGNATURE does not exist"
+        print("DISK_SIGNATURE does not exist")
         HashInstructions['DISK_SIGNATURE'] = 0x00000000
 
     if 'ALIGN_BOUNDARY_IN_KB' in HashInstructions:
         if type(HashInstructions['ALIGN_BOUNDARY_IN_KB']) is str:
             m = re.search("^(\d+)$", HashInstructions['ALIGN_BOUNDARY_IN_KB'])
-            if type(m) is NoneType:
+            if m is None:
                 ## we didn't match, so assign deafult
                 HashInstructions['ALIGN_BOUNDARY_IN_KB'] = HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']
             else:
@@ -1192,19 +1200,10 @@ def ParseXML(XMLFile):
         #print "ALIGN_BOUNDARY_IN_KB does not exist"
         HashInstructions['ALIGN_BOUNDARY_IN_KB'] = HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']
 
-
-
-
-
-
-
-
-
-
     root = ET.parse( XMLFile )
 
     #Create an iterator
-    iter = root.getiterator()
+    iter = list(root.iter())
 
     ## Need to count how many partitions
     CheckPartitionCount = [0,0,0,0,0,0,0,0]
@@ -1220,7 +1219,7 @@ def ParseXML(XMLFile):
             #print "CheckPartitionCount[%d]=%d" % (CurrentPartition,CheckPartitionCount[CurrentPartition])
 
     for p in range(CurrentPartition+1):
-        print "CheckPartitionCount[%d]=%d" % (p,CheckPartitionCount[p])
+        print("CheckPartitionCount[%d]=%d" % (p,CheckPartitionCount[p]))
 
     CurrentPartition    = -1
     for element in iter:
@@ -1238,24 +1237,24 @@ def ParseXML(XMLFile):
             PartitionCollection          = []    # Reset, we've found a new physical partition
 
             if NumPhyPartitions-len(PhyPartition)>=2:
-                print "\n\n"
-                print "*"*78
-                print "ERROR: Empty <physical_partition></physical_partition> tags detected\n"
-                print "Please replace with"
-                print "<physical_partition>"
-                print "<partition label='placeholder' size_in_kb='0' type='00000000-0000-0000-0000-000000000001' bootable='false' readonly='false' filename='' />"
-                print "</physical_partition>\n"
+                print("\n\n")
+                print("*"*78)
+                print("ERROR: Empty <physical_partition></physical_partition> tags detected\n")
+                print("Please replace with")
+                print("<physical_partition>")
+                print("<partition label='placeholder' size_in_kb='0' type='00000000-0000-0000-0000-000000000001' bootable='false' readonly='false' filename='' />")
+                print("</physical_partition>\n")
                 sys.exit()
 
-            print "\nFound a physical_partition, NumPhyPartitions=%d" % NumPhyPartitions
-            print "\nlen(PhyPartition)=%d" % len(PhyPartition)
+            print("\nFound a physical_partition, NumPhyPartitions=%d" % NumPhyPartitions)
+            print("\nlen(PhyPartition)=%d" % len(PhyPartition))
 
 
         elif element.tag=="partition" or element.tag=="primary" or element.tag=="extended":
 
             CurrentPartition+=1
 
-            if element.keys():
+            if list(element.keys()):
                 #print "\tAttributes:"
 
                 # Reset all variables to defaults
@@ -1272,10 +1271,10 @@ def ParseXML(XMLFile):
 
                 Partition['size_in_kb']         = 0
                 Partition['original_size_in_kb']= 0
-                Partition["readonly"]           = "false"
+                Partition['readonly']           = "false"
                 Partition['label']              = "false"
                 Partition['type']               = "false"
-                Partition['uguid']              = "false"	## unique guid
+                Partition['uguid']              = "false"   ## unique guid
                 Partition['align']              = "false"
                 Partition['hidden']             = "false"
                 Partition['system']             = "false"
@@ -1286,7 +1285,7 @@ def ParseXML(XMLFile):
                 Partition['priority']           = 0
 
                 ##import pdb; pdb.set_trace()
-                
+
                 if 'PERFORMANCE_BOUNDARY_IN_KB' in HashInstructions:
                     Partition['PERFORMANCE_BOUNDARY_IN_KB']  = int(HashInstructions['PERFORMANCE_BOUNDARY_IN_KB'])
                 else:
@@ -1294,20 +1293,20 @@ def ParseXML(XMLFile):
 
                 FileFound = 0
 
-                print " "
+                print(" ")
 
-                for name, value in element.items():
+                for name, value in list(element.items()):
                     #print "\t\tName: '%s'=>'%s' " % (name,value)
 
                     if name=='name' or name=='filename' :
                         Partition['filename'][-1] = value
                         FileFound = 1
-                        print "Found a file tag '%s'" % value
+                        print("Found a file tag '%s'" % value)
                     elif name=='fileoffset':
                         Partition['fileoffset'][-1] = value
                     elif name=='label':
                         Partition['label'] = value
-                        print "LABEL:",value
+                        print("LABEL:",value)
                     elif name=='offset' or name=='filepartitionoffset':
                         Partition['filepartitionoffset'][-1] = int(value)
                     elif name=='appsbin':
@@ -1320,21 +1319,20 @@ def ParseXML(XMLFile):
                         if ValidGUIDForm(value) is True:
                             if OutputToCreate is None:
                                 OutputToCreate = "gpt"
-                            elif OutputToCreate is "mbr":
+                            elif OutputToCreate == "mbr":
                                 PrintBigError("ERROR: Your partition.xml is possibly corrupt, please check the GUID TYPE field")
                             Partition['type'] = ValidateGUID(value)
-
                         else:
                             if OutputToCreate is None:
                                 OutputToCreate = "mbr"
-                            elif OutputToCreate is "gpt":
+                            elif OutputToCreate == "gpt":
                                 PrintBigError("ERROR: Your partition.xml is possibly corrupt, please check the TYPE field")
                             Partition['type'] = ValidateTYPE(value)
                     elif name=='uniqueguid':
                         if ValidGUIDForm(value) is True:
                             Partition['uguid'] = ValidateGUID(value)
                         else:
-							PrintBigError("ERROR: Your partition.xml is possibly corrupt, please check the TYPE field")
+                            PrintBigError("ERROR: Your partition.xml is possibly corrupt, please check the TYPE field")
                     elif name=="triesremaining":
                         Partition['tries_remaining'] = int(value);
                     elif name=="priority":
@@ -1358,7 +1356,7 @@ def ParseXML(XMLFile):
 
                         if value=='0':
                             if CheckPartitionCount[NumPhyPartitions-1] == CurrentPartition:
-                                ## To be here means they have size_in_kb='0' BUT this is ok since it is the LAST partition 
+                                ## To be here means they have size_in_kb='0' BUT this is ok since it is the LAST partition
                                 pass
                             else:
                                 PrintBigError("\nERROR: Invalid size_in_kb='0' detected on partition %d of %d. This is usually a mistake. Did you mean this to be the *last* partition"%(CurrentPartition,CheckPartitionCount[NumPhyPartitions-1]))
@@ -1373,21 +1371,21 @@ def ParseXML(XMLFile):
                         Partition["original_size_in_kb"]=TempSizeInBytes/1024
 
                     else:
-                        print "Just assigned %s to %s" % (name,value)
+                        print("Just assigned %s to %s" % (name,value))
                         Partition[name]=value
-                
-		# No longer appending blank filename data for Trace32. Programming based on Label now
+
+        # No longer appending blank filename data for Trace32. Programming based on Label now
                 #if FileFound == 1:
                 #    Partition['filename'].append("")
                 #    Partition['fileoffset'].append(0)
                 #    Partition['filepartitionoffset'].append(0)
                 #    Partition['appsbin'].append("false")
                 #    Partition['sparse'].append("false")
-                
+
 
 
                 ## done with all the elements, now ensure that size matches with size_in_kb
-                Partition["size"] = ConvertKBtoSectors(Partition["size_in_kb"])	# Still 512 bytes/sector here since "size" is a legacy field
+                Partition["size"] = ConvertKBtoSectors(Partition["size_in_kb"]) # Still 512 bytes/sector here since "size" is a legacy field
 
                 ## Now add this "Partition" object to the PartitionCollection
                 ## unless it's the label EXT, which is a left over legacy tag
@@ -1396,15 +1394,15 @@ def ParseXML(XMLFile):
                     #print "\nJust added %s" % Partition['label']
                     PartitionCollection.append( Partition )
 
-                    print "="*40
-                    print "storing at %d" % (NumPhyPartitions-1)
+                    print("="*40)
+                    print("storing at %d" % (NumPhyPartitions-1))
                     ##import pdb; pdb.set_trace()
 
-                    print "Adding PartitionCollection to \"PhyPartition\" of size %i" % (NumPhyPartitions-1)
+                    print("Adding PartitionCollection to \"PhyPartition\" of size %i" % (NumPhyPartitions-1))
                     PhyPartition[(NumPhyPartitions-1)]          = PartitionCollection
 
                     #print "\nPartition stored (%i partitions total)" % len(PartitionCollection)
-            
+
             else:
                 PrintBigError("ERROR: element.tag was partition, primary or extended, but it had no keys!")
 
@@ -1413,8 +1411,8 @@ def ParseXML(XMLFile):
             #print PhyPartition[(NumPhyPartitions-1)]
             #print "Current partition is \"%s\"\n" % Partition['label']
 
-            if element.keys():
-                for name, value in element.items():
+            if list(element.keys()):
+                for name, value in list(element.items()):
                     if name=='name' or name=='filename' :
                         Partition['filename'][-1] = value
                     if name=='fileoffset':
@@ -1427,14 +1425,14 @@ def ParseXML(XMLFile):
                         Partition['sparse'][-1] = value
 
                     #Partition[name]=value
-            
+
             #print Partition['filename']
             Partition['filename'].append("")
             Partition['fileoffset'].append(0)
             Partition['filepartitionoffset'].append(0)
             Partition['appsbin'].append("false")
             Partition['sparse'].append("false")
-            
+
         #try:
         #    if len(Partition['filename'])>1:
         #        print "="*78
@@ -1452,7 +1450,7 @@ def ParseXML(XMLFile):
         #print "Showing the changes to PartitionCollection"
         #print PartitionCollection[-1]
 
-            
+
     # Must update this if the user has updated WRITE_PROTECT_BOUNDARY_IN_KB in partition.xml
     hash_w[NumWPregions]['num_sectors'] = (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']*1024/SECTOR_SIZE_IN_BYTES)
     hash_w[NumWPregions]['end_sector']  = (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']*1024/SECTOR_SIZE_IN_BYTES)-1
@@ -1462,15 +1460,15 @@ def ParseXML(XMLFile):
         hash_w[NumWPregions]['end_sector']              = 0
         hash_w[NumWPregions]['num_boundaries_covered']  = 0
 
-    if OutputToCreate is "gpt" and HashInstructions['WRITE_PROTECT_GPT_PARTITION_TABLE'] is False:
+    if OutputToCreate == "gpt" and HashInstructions['WRITE_PROTECT_GPT_PARTITION_TABLE'] is False:
         hash_w[NumWPregions]['num_sectors']             = 0
         hash_w[NumWPregions]['end_sector']              = 0
         hash_w[NumWPregions]['num_boundaries_covered']  = 0
 
-    print "HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']    =%d" % HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']
-    print "HashInstructions['ALIGN_BOUNDARY_IN_KB']            =%d" % HashInstructions['ALIGN_BOUNDARY_IN_KB']
-    print "HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK']=%s" % HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK']
-    print "HashInstructions['DISK_SIGNATURE']=0x%X" % HashInstructions['DISK_SIGNATURE']
+    print("HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']    =%d" % HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'])
+    print("HashInstructions['ALIGN_BOUNDARY_IN_KB']            =%d" % HashInstructions['ALIGN_BOUNDARY_IN_KB'])
+    print("HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK']=%s" % HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK'])
+    print("HashInstructions['DISK_SIGNATURE']=0x%X" % HashInstructions['DISK_SIGNATURE'])
 
     #for j in range(len(PhyPartition)):
     #for j in range(1):
@@ -1478,7 +1476,7 @@ def ParseXML(XMLFile):
     #    PrintPartitionCollection( PhyPartition[j] )
 
 
-    print "len(PhyPartition)=",len(PhyPartition)
+    print("len(PhyPartition)=",len(PhyPartition))
 
     if HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK']==False:
         ## to be here means we're *not* growing final partition, thereore, obey the sizes they've specified
@@ -1490,22 +1488,22 @@ def ParseXML(XMLFile):
                 MinSectorsNeeded = 1    # need MBR only
 
             for Partition in PhyPartition[j]:
-                print "LABEL: '%s' with %d sectors " % (Partition['label'],ConvertKBtoSectors(Partition["size_in_kb"]))
+                print("LABEL: '%s' with %d sectors " % (Partition['label'],ConvertKBtoSectors(Partition["size_in_kb"])))
 
                 MinSectorsNeeded += ConvertKBtoSectors(Partition["size_in_kb"])
 
                 #print "LABEL '%s' with size %d sectors" % (Partition['label'],Partition['size_in_kb']/2)
 
-            
-    print "MinSectorsNeeded=%d" % MinSectorsNeeded
-    #sys.exit()  # 
-                
-                
-    if OutputToCreate is 'gpt':
+
+    print("MinSectorsNeeded=%d" % MinSectorsNeeded)
+    #sys.exit()  #
+
+
+    if OutputToCreate == 'gpt':
         PrintBanner("GPT GUID discovered in XML file, Output will be GPT")
-    if OutputToCreate is 'mbr':
+    if OutputToCreate == 'mbr':
         PrintBanner("MBR type discovered in XML file, Output will be MBR")
-    
+
 
 #    PrintPartitionCollection( PhyPartition[0] )
 def PrintPartitionCollection(PartitionCollection):
@@ -1513,44 +1511,44 @@ def PrintPartitionCollection(PartitionCollection):
     #print PartitionCollection
 
     for Partition in PartitionCollection:
-        print Partition
-        print " "
+        print(Partition)
+        print(" ")
         for key in Partition:
-            print key,"\t=>\t",Partition[key]
+            print(key,"\t=>\t",Partition[key])
 
     #for j in range(NumMBRPartitions):
 
 def ParseCommandLine():
     global XMLFile,OutputToCreate,PhysicalPartitionNumber
 
-    print "\nArgs"
+    print("\nArgs")
     for i in range(len(sys.argv)):
-        print "sys.argv[%d]=%s" % (i,sys.argv[i])
+        print("sys.argv[%d]=%s" % (i,sys.argv[i]))
 
-    print " "
+    print(" ")
 
     XMLFile = sys.argv[1];
 
     if len(sys.argv) >= 3:
         m = re.search("mbr|gpt", sys.argv[2] )
 
-        if type(m) is not NoneType:
+        if m is not None:
             OutputToCreate = sys.argv[2]
         else:
-            print "Unrecognized option '%s', only 'mbr' or 'gpt' expected" % sys.argv[2]
+            print("Unrecognized option '%s', only 'mbr' or 'gpt' expected" % sys.argv[2])
     else:
-        print "\nUser *did* not explicitly specify partition table format (i.e. mbr|gpt)"
-        print "\nWill AUTO-DETECT from file"
+        print("\nUser *did* not explicitly specify partition table format (i.e. mbr|gpt)")
+        print("\nWill AUTO-DETECT from file")
 
     if len(sys.argv) >= 4:  # Should mean PHY partition was specified
         m = re.search("^\d+$", sys.argv[3] )
-        if type(m) is not NoneType:
+        if m is not None:
             PhysicalPartitionNumber = int(sys.argv[3])
-            print "PhysicalPartitionNumber specified as %d" % PhysicalPartitionNumber
+            print("PhysicalPartitionNumber specified as %d" % PhysicalPartitionNumber)
         else:
             PrintBigError("ERROR: PhysicalPartitionNumber of disk must only contain numbers, '%s' is not valid" % sys.argv[3])
 
-    print " "
+    print(" ")
 
 # Updates the WriteProtect hash that is used in creating emmc_lock_regions.xml
 def UpdateWPhash(Start,Size):
@@ -1566,9 +1564,9 @@ def UpdateWPhash(Start,Size):
 
     if Start-1 <= hash_w[NumWPregions]["end_sector"]:
         #print "\n\tCurrent Write Protect region already covers the start of this partition (start=%i)" % hash_w[NumWPregions]["start_sector"]
-        
+
         if (Start + Size - 1) > hash_w[NumWPregions]["end_sector"]:
-            print "\n\tCurrent Write Protect region is not big enough at %i sectors, needs to be at least %i sectors" % (hash_w[NumWPregions]["end_sector"]-hash_w[NumWPregions]["start_sector"]+1,Start + Size - 1,)
+            print("\n\tCurrent Write Protect region is not big enough at %i sectors, needs to be at least %i sectors" % (hash_w[NumWPregions]["end_sector"]-hash_w[NumWPregions]["start_sector"]+1,Start + Size - 1,))
             while (Start + Size - 1) > hash_w[NumWPregions]["end_sector"]:
                 hash_w[NumWPregions]["num_sectors"] += (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']*1024/SECTOR_SIZE_IN_BYTES);
                 hash_w[NumWPregions]["end_sector"]  += (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']*1024/SECTOR_SIZE_IN_BYTES);
@@ -1576,22 +1574,22 @@ def UpdateWPhash(Start,Size):
                     hash_w[NumWPregions]["num_boundaries_covered"] = hash_w[NumWPregions]["num_sectors"] / (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']*1024/SECTOR_SIZE_IN_BYTES)
                 else:
                     hash_w[NumWPregions]["num_boundaries_covered"] = 0
-            
-            print "\t\tend_sector increased to %i sectors" % hash_w[NumWPregions]["end_sector"]
-            print "\t\tnum_sectors increased to %i sectors" % hash_w[NumWPregions]["num_sectors"]
-        
+
+            print("\t\tend_sector increased to %i sectors" % hash_w[NumWPregions]["end_sector"])
+            print("\t\tnum_sectors increased to %i sectors" % hash_w[NumWPregions]["num_sectors"])
+
         #print "\n\tCurrent Write Protect region covers this partition (num_sectors=%i)\n" % hash_w[NumWPregions]["num_sectors"]
-        
+
     else:
-        print "\n\tNew write protect region needed"
+        print("\n\tNew write protect region needed")
         #print "\tStart-1\t\t\t\t=%i" % (Start-1)
         #print "\tLAST hash_w[NumWPregions][end_sector]=%i\n" % hash_w[NumWPregions]["end_sector"]
-        
+
 
         NumWPregions+=1;
-        
+
         hash_w.append( {'start_sector':Start,'num_sectors':(HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']*1024/SECTOR_SIZE_IN_BYTES),'end_sector':Start+(HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']*1024/SECTOR_SIZE_IN_BYTES)-1,'physical_partition_number':0,'boundary_num':0,'num_boundaries_covered':1} )
-        
+
         hash_w[NumWPregions]["boundary_num"] = Start / (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']*1024/SECTOR_SIZE_IN_BYTES)
 
         while (Start + Size - 1) > hash_w[NumWPregions]["end_sector"]:
@@ -1600,12 +1598,12 @@ def UpdateWPhash(Start,Size):
             hash_w[NumWPregions]["end_sector"]  += (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']*1024/SECTOR_SIZE_IN_BYTES);
             #print "\t\tend_sector increased to %i sectors" % hash_w[NumWPregions]["end_sector"]
             #print "\t\tnum_sectors increased to %i sectors" % hash_w[NumWPregions]["num_sectors"]
-            
+
         hash_w[NumWPregions]["num_boundaries_covered"] = hash_w[NumWPregions]["num_sectors"] / (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']*1024/SECTOR_SIZE_IN_BYTES)
 
-        print "\t\tstart_sector = %i sectors" % hash_w[NumWPregions]["start_sector"]
-        print "\t\tend_sector = %i sectors" % hash_w[NumWPregions]["end_sector"]
-        print "\t\tnum_sectors = %i sectors\n" % hash_w[NumWPregions]["num_sectors"]
+        print("\t\tstart_sector = %i sectors" % hash_w[NumWPregions]["start_sector"])
+        print("\t\tend_sector = %i sectors" % hash_w[NumWPregions]["end_sector"])
+        print("\t\tnum_sectors = %i sectors\n" % hash_w[NumWPregions]["num_sectors"])
 
 # A8h reflected is 15h, i.e. 10101000 <--> 00010101
 def reflect(data,nBits):
@@ -1624,38 +1622,38 @@ def reflect(data,nBits):
 def CalcCRC32(array,Len):
    k        = 8;            # length of unit (i.e. byte)
    MSB      = 0;
-   gx	    = 0x04C11DB7;   # IEEE 32bit polynomial
+   gx       = 0x04C11DB7;   # IEEE 32bit polynomial
    regs     = 0xFFFFFFFF;   # init to all ones
    regsMask = 0xFFFFFFFF;   # ensure only 32 bit answer
 
-   print "Calculating CRC over byte length of %i" % Len
-   print "%s" % HexPrettyPrint(array,Len)
+   print("Calculating CRC over byte length of %i" % Len)
+   print("%s" % HexPrettyPrint(array,Len))
 
-   for i in range(Len):
+   for i in range(int(Len)):
       DataByte = array[i]
       DataByte = reflect( DataByte, 8 );
-   
+
       for j in range(k):
         MSB  = DataByte>>(k-1)  ## get MSB
         MSB &= 1                ## ensure just 1 bit
-   
+
         regsMSB = (regs>>31) & 1
 
         regs = regs<<1          ## shift regs for CRC-CCITT
-   
+
         if regsMSB ^ MSB:       ## MSB is a 1
             regs = regs ^ gx    ## XOR with generator poly
-   
+
         regs = regs & regsMask; ## Mask off excess upper bits
 
         DataByte <<= 1          ## get to next bit
 
-   
+
    regs          = regs & regsMask ## Mask off excess upper bits
    ReflectedRegs = reflect(regs,32) ^ 0xFFFFFFFF;
 
    #print "CRC is 0x%.8X\n" % ReflectedRegs
-   
+
    return ReflectedRegs
 
 
@@ -1681,7 +1679,7 @@ def HexPrettyPrint(data,Length):
 
    TempAddress = 0
    szHexDump = "\n\tShowing %d bytes\n\t" % (Length)
-   for i in range(Length):
+   for i in range(int(Length)):
        v = data[i]
 
        if v == 0x7 and i==0 and Length>5:
@@ -1695,8 +1693,8 @@ def HexPrettyPrint(data,Length):
            szNum = ""
            szAsc = ""
 
-       ##print "v=",v," type",type(v)   
-       ##import pdb; pdb.set_trace()     
+       ##print "v=",v," type",type(v)
+       ##import pdb; pdb.set_trace()
        #if type(v) is not int:    ## HACK
        #    v = ord(v)  ## convert to unsigned char (integers in python)
        szNum += "%.2X " % v
@@ -1719,22 +1717,23 @@ def ReturnHigh32bits(var):
     return (var>>32) & 0xFFFFFFFF
 
 def PrintBanner(sz):
-    print "\n"+"="*78
-    print sz
-    print "="*78+"\n"
+    print("\n"+"="*78)
+    print(sz)
+    print("="*78+"\n")
 
 def ShowUsage():
     PrintBanner("Basic Usage")
-    print "python ptool.py -x partition.xml"
+    print("python ptool.py -x partition.xml")
     PrintBanner("Advanced Usage")
-    print "%-44s\t\tpython ptool.py -x partition.xml" % ("Basic Usage")
-    print "%-44s\t\tpython ptool.py -x partition.xml -s c:\windows" % ("Search path to find partition.xml")
-    print "%-44s\tpython ptool.py -x partition.xml -p 0" % ("Specify PHY Partition 0, (creates rawprogram0.xml)")
-    print "%-44s\tpython ptool.py -x partition.xml -p 1" % ("Specify PHY Partition 1, (creates rawprogram1.xml)")
-    print "%-44s\tpython ptool.py -x partition.xml -p 2" % ("Specify PHY Partition 2, (creates rawprogram2.xml)")
-    print "%-44s\t\tpython ptool.py -x partition.xml -v" % ("Verbose output")
-    print "%-44s\t\tpython ptool.py -x partition.xml -t c:\\temp" % ("Specify place to put output")
-    
+    print("%-44s\t\tpython ptool.py -x partition.xml" % ("Basic Usage"))
+    print("%-44s\t\tpython ptool.py -x partition.xml -s c:\windows" % ("Search path to find partition.xml"))
+    print("%-44s\tpython ptool.py -x partition.xml -p 0" % ("Specify PHY Partition 0, (creates rawprogram0.xml)"))
+    print("%-44s\tpython ptool.py -x partition.xml -p 1" % ("Specify PHY Partition 1, (creates rawprogram1.xml)"))
+    print("%-44s\tpython ptool.py -x partition.xml -p 2" % ("Specify PHY Partition 2, (creates rawprogram2.xml)"))
+    print("%-44s\t\tpython ptool.py -x partition.xml -v" % ("Verbose output"))
+    print("%-44s\t\tpython ptool.py -x partition.xml -t c:\\temp" % ("Specify place to put output"))
+    print("%-44s\t\tpython ptool.py -x partition.xml -n" % ("Don't require the use of patch file"))
+
 def CreateFinalPartitionBin():
     global OutputFolder
 
@@ -1809,25 +1808,25 @@ def CreateMBRPartitionTable(PhysicalPartitionNumber):
     k = PhysicalPartitionNumber
 
     if(k>=len(PhyPartition)):
-        print "PHY Partition %i of %i not found" % (k,len(PhyPartition))
+        print("PHY Partition %i of %i not found" % (k,len(PhyPartition)))
         sys.exit()
-    
+
     NumPartitions = len(PhyPartition[k])
 
-    print "\n\nOn PHY Partition %d that has %d partitions" % (k,NumPartitions)
+    print("\n\nOn PHY Partition %d that has %d partitions" % (k,NumPartitions))
 
-    print "\n------------\n"
+    print("\n------------\n")
 
-    print "\nFor PHY Partition %i" % k
+    print("\nFor PHY Partition %i" % k)
     if(NumPartitions<=4):
-        print "\tWe can get away with only an MBR";
+        print("\tWe can get away with only an MBR");
         CreateMasterBootRecord(k, NumPartitions )
     else:
-        print "\tWe will need an MBR and %d EBRs" % (NumPartitions-3)
+        print("\tWe will need an MBR and %d EBRs" % (NumPartitions-3))
         CreateMasterBootRecord(k, 3 )
 
         ## Now the EXTENDED PARTITION
-        print "\nAbout to make EBR, FirstLBA=%i, LastLBA=%i" % (FirstLBA,LastLBA)
+        print("\nAbout to make EBR, FirstLBA=%i, LastLBA=%i" % (FirstLBA,LastLBA))
         CreateExtendedBootRecords(k,NumPartitions-3)
 
 
@@ -1843,33 +1842,33 @@ def CreateMBRPartitionTable(PhysicalPartitionNumber):
         ## There was more than 4 partitions, so EXT partition had to be used
         UpdateRawProgram(RawProgramXML,ExtendedPartitionBegins, (NumPartitions-3)*SECTOR_SIZE_IN_BYTES/1024.0, k, 0, NumPartitions-3, EBRBIN, 'false', 'EXT')          # note file offset is 0
 
-    print "\nptool.py is running from CWD: ", os.getcwd(), "\n"
+    print("\nptool.py is running from CWD: ", os.getcwd(), "\n")
 
     opfile = open(PARTITIONBIN, "wb")
     WriteMBR()
     WriteEBR()
     opfile.close()
-    print "Created \"%s\"" % PARTITIONBIN
+    print("Created \"%s\"" % PARTITIONBIN)
 
     opfile = open(MBRBIN, "wb")
     WriteMBR()
     opfile.close()
-    print "Created \"%s\"" % MBRBIN
+    print("Created \"%s\"" % MBRBIN)
 
     opfile = open(EBRBIN, "wb")
     WriteEBR()
     opfile.close()
-    print "Created \"%s\"" % EBRBIN
+    print("Created \"%s\"" % EBRBIN)
 
     opfile = open(RAW_PROGRAM, "w")
     opfile.write( prettify(RawProgramXML) )
     opfile.close()
-    print "Created \"%s\"" % RAW_PROGRAM
+    print("Created \"%s\"" % RAW_PROGRAM)
 
     opfile = open(PATCHES, "w")
     opfile.write( prettify(PatchesXML) )
     opfile.close()
-    print "Created \"%s\"" % PATCHES
+    print("Created \"%s\"" % PATCHES)
 
     for mydict in hash_w:
         #print mydict
@@ -1886,23 +1885,23 @@ def CreateMBRPartitionTable(PhysicalPartitionNumber):
 
     opfile.write( prettify(EmmcLockRegionsXML) )
     opfile.close()
-    print "Created \"%semmc_lock_regions.xml\"" % OutputFolder
+    print("Created \"%semmc_lock_regions.xml\"" % OutputFolder)
 
-    print "\nUse msp tool to write this information to SD/eMMC card"
-    print "\ti.e."
+    print("\nUse msp tool to write this information to SD/eMMC card")
+    print("\ti.e.")
 
     if sys.platform.startswith("linux"):
-        print "\tsudo python msp.py rawprogram0.xml /dev/sdb    <---- where /dev/sdb is assumed to be your SD/eMMC card"
-        print "\tsudo python msp.py patch0.xml /dev/sdb    <---- where /dev/sdb is assumed to be your SD/eMMC card\n\n"
+        print("\tsudo python msp.py rawprogram0.xml /dev/sdb    <---- where /dev/sdb is assumed to be your SD/eMMC card")
+        print("\tsudo python msp.py patch0.xml /dev/sdb    <---- where /dev/sdb is assumed to be your SD/eMMC card\n\n")
     else:
-        print "\tpython msp.py rawprogram0.xml \\\\.\\PHYSICALDRIVE2    <---- where \\\\.\\PHYSICALDRIVE2 is"
-        print "\tpython msp.py patch0.xml \\\\.\\PHYSICALDRIVE2    <---- assumed to be your SD/eMMC card\n\n"
+        print("\tpython msp.py rawprogram0.xml \\\\.\\PHYSICALDRIVE2    <---- where \\\\.\\PHYSICALDRIVE2 is")
+        print("\tpython msp.py patch0.xml \\\\.\\PHYSICALDRIVE2    <---- assumed to be your SD/eMMC card\n\n")
 
 
   # CreateMasterBootRecord(k,len(PhyPartition[k]) )
 def CreateMasterBootRecord(k,NumMBRPartitions):
     global PhyPartition,HashInstructions,MBR,FirstLBA,LastLBA
-    print "\nInside CreateMasterBootRecord(%d) -------------------------------------" % NumMBRPartitions    
+    print("\nInside CreateMasterBootRecord(%d) -------------------------------------" % NumMBRPartitions)
 
     MBR             = [0]*SECTOR_SIZE_IN_BYTES
     MBR[440]        = (HashInstructions['DISK_SIGNATURE']>>24)&0xFF
@@ -1926,23 +1925,23 @@ def CreateMasterBootRecord(k,NumMBRPartitions):
 
         PartitionSectorSize = ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb'])    # in sector form, i.e. 1KB = 2 sectors
 
-        print "\n\n%d of %d \"%s\" (readonly=%s) and size=%dKB (%.2fMB or %i sectors)" % (j+1,len(PhyPartition[k]),PhyPartition[k][j]['label'],
+        print("\n\n%d of %d \"%s\" (readonly=%s) and size=%dKB (%.2fMB or %i sectors)" % (j+1,len(PhyPartition[k]),PhyPartition[k][j]['label'],
                                         PhyPartition[k][j]['readonly'],PhyPartition[k][j]['size_in_kb'],
-                                        PhyPartition[k][j]['size_in_kb']/1024.0,ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb']))
+                                        PhyPartition[k][j]['size_in_kb']/1024.0,ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb'])))
 
 
         # Is this sector aligned?
         if HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']>0:
             AlignedRemainder = FirstLBA % HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'];
-            
+
             if AlignedRemainder==0:
-                print "\tThis partition is ** ALIGNED ** to a %i KB boundary at sector %i (boundary %i)" % (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'],FirstLBA,FirstLBA/(ConvertKBtoSectors(HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'])))
+                print("\tThis partition is ** ALIGNED ** to a %i KB boundary at sector %i (boundary %i)" % (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'],FirstLBA,FirstLBA/(ConvertKBtoSectors(HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']))))
 
 
         # are we on the very last partition, i.e. did user only specify 3 or less partitions?
         if (j+1) == len(PhyPartition[k]):
-            print "\nTHIS IS THE LAST PARTITION"
-            print "HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK'] = %s" % HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK']
+            print("\nTHIS IS THE LAST PARTITION")
+            print("HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK'] = %s" % HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK'])
             if HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK']==True:
                 SectorOffsetPatchBefore = 0
                 SectorOffsetPatchAfter  = 0
@@ -1950,13 +1949,13 @@ def CreateMasterBootRecord(k,NumMBRPartitions):
                 UpdatePatch(str(SectorOffsetPatchBefore),str(ByteOffset),k,4,"NUM_DISK_SECTORS-%s." % str(FirstLBA),"partition%d.bin" % k, "Update last partition with actual size.")
                 UpdatePatch(str(SectorOffsetPatchBefore),str(ByteOffset),k,4,"NUM_DISK_SECTORS-%s." % str(FirstLBA),"MBR%d.bin" % k, "Update last partition with actual size.")
                 UpdatePatch(str(SectorOffsetPatchAfter), str(ByteOffset),k,4,"NUM_DISK_SECTORS-%s." % str(FirstLBA),"DISK", "Update 'Update last partition with actual size.")
-                    
-        # Update the Write-Protect hash 
+
+        # Update the Write-Protect hash
         if PhyPartition[k][j]['readonly']=="true":
             UpdateWPhash(FirstLBA, PartitionSectorSize)
 
         LastLBA += PartitionSectorSize ## increase by num sectors, LastLBA inclusive, so add 1 for size
-        
+
         ## Default for each partition is no file
         FileToProgram           = [""]
         FileOffset              = [0]
@@ -1968,7 +1967,7 @@ def CreateMasterBootRecord(k,NumMBRPartitions):
             ##print "filename exists"
             #print PhyPartition[k][j]['filename']
             #print FileToProgram[0]
-            
+
 
             FileToProgram[0]            = PhyPartition[k][j]['filename'][0]
             FileOffset[0]               = PhyPartition[k][j]['fileoffset'][0]
@@ -1984,13 +1983,13 @@ def CreateMasterBootRecord(k,NumMBRPartitions):
                 FileSparse.append( PhyPartition[k][j]['sparse'][z] )
 
             #print PhyPartition[k][j]['fileoffset']
-            
+
 
         #for z in range(len(FileToProgram)):
         #    print "FileToProgram[",z,"]=",FileToProgram[z]
         #    print "FileOffset[",z,"]=",FileOffset[z]
         #    print " "
-        
+
         PartitionLabel  = ""
         Type            = ""
         Bootable        = "false"
@@ -2019,22 +2018,22 @@ def CreateMasterBootRecord(k,NumMBRPartitions):
 # CreateExtendedBootRecords(k,len(PhyPartition[k])-3)
 def CreateExtendedBootRecords(k,NumEBRPartitions):
     global PhyPartition,HashInstructions,MBR,EBR,FirstLBA,LastLBA,ExtendedPartitionBegins
-    print "\nInside CreateExtendedBootRecords(%d) -----------------------------------------" % NumEBRPartitions
+    print("\nInside CreateExtendedBootRecords(%d) -----------------------------------------" % NumEBRPartitions)
 
     ## Step 1 is to update the MBR with the size of the EXT partition
     ## in which logical partitions will be created
 
     EBROffset = 0
 
-    print "EBROffset=",EBROffset
+    print("EBROffset=",EBROffset)
 
     ExtendedPartitionBegins = FirstLBA
 
     if HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK']==True:
-        print "Extended Partition begins at FirstLBA=%i\n" % (ExtendedPartitionBegins)
+        print("Extended Partition begins at FirstLBA=%i\n" % (ExtendedPartitionBegins))
         MBR=UpdatePartitionTable("false","05",FirstLBA,0x0,0x1EE,MBR)  ## offset at 0x1EE is the last entry in MBR
     else:
-        print "Extended Partition begins at FirstLBA=%i, size is %i\n" % (ExtendedPartitionBegins,MinSectorsNeeded-FirstLBA)
+        print("Extended Partition begins at FirstLBA=%i, size is %i\n" % (ExtendedPartitionBegins,MinSectorsNeeded-FirstLBA))
         MBR=UpdatePartitionTable("false","05",FirstLBA,MinSectorsNeeded-FirstLBA,0x1EE,MBR)  ## offset at 0x1EE is the last entry in MBR
 
     ## Still patch no matter what, since this can still go on any size card
@@ -2048,14 +2047,14 @@ def CreateExtendedBootRecords(k,NumEBRPartitions):
     FirstLBA        += NumEBRPartitions
     LastLBA         += NumEBRPartitions
 
-    print "FirstLBA now equals %d since NumEBRPartitions=%d" % (FirstLBA,NumEBRPartitions)
+    print("FirstLBA now equals %d since NumEBRPartitions=%d" % (FirstLBA,NumEBRPartitions))
 
     offset                  = 0     # offset to EBR array which gets EBR.extend( [0]*SECTOR_SIZE_IN_BYTES ) for each EBR
     SectorsTillNextBoundary = 0     # reset
 
 
     # EBROffset is the num sectors from the location of the EBR to the actual logical partition
-    # and because we group all the EBRs together, 
+    # and because we group all the EBRs together,
     #   EBR0 is NumEBRPartitions away from EXT0
     #   EBR1 is NumEBRPartitions-1+SizeOfEXT0 away from EXT1 and so on
     #   EBR2 is NumEBRPartitions-2+SizeOfEXT0+SizeOfEXT1 away from EXT2 and so on
@@ -2079,93 +2078,93 @@ def CreateExtendedBootRecords(k,NumEBRPartitions):
         PartitionSectorSize = ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb'])
 
         ##print "\nPartition name='%s' (readonly=%s)" % (PhyPartition[k][j]['label'], PhyPartition[k][j]['readonly'])
-        print "\n\n%d of %d \"%s\" (readonly=%s) and size=%dKB (%.2fMB or %i sectors)" %(j+1,len(PhyPartition[k]),PhyPartition[k][j]['label'],PhyPartition[k][j]['readonly'],PhyPartition[k][j]['size_in_kb'],PhyPartition[k][j]['size_in_kb']/1024.0,ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb']))
-        print "\tFirstLBA=%d (with size %d sectors) and LastLBA=%d" % (FirstLBA,ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb']),LastLBA)
+        print("\n\n%d of %d \"%s\" (readonly=%s) and size=%dKB (%.2fMB or %i sectors)" %(j+1,len(PhyPartition[k]),PhyPartition[k][j]['label'],PhyPartition[k][j]['readonly'],PhyPartition[k][j]['size_in_kb'],PhyPartition[k][j]['size_in_kb']/1024.0,ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb'])))
+        print("\tFirstLBA=%d (with size %d sectors) and LastLBA=%d" % (FirstLBA,ConvertKBtoSectors(PhyPartition[k][j]['size_in_kb']),LastLBA))
 
         if HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']>0:
             SectorsTillNextBoundary = ReturnNumSectorsTillBoundary(FirstLBA,HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'])
 
         # Only the last partition can be re-sized. Are we on the very last partition?
         if (j+1) == len(PhyPartition[k]):
-            print "\n\tTHIS IS THE LAST PARTITION"
+            print("\n\tTHIS IS THE LAST PARTITION")
 
             if PhyPartition[k][j]['readonly']=="true":
                 PhyPartition[k][j]['readonly']="false"
-                print "\tIt cannot be marked as read-only, it is now set to writeable"
+                print("\tIt cannot be marked as read-only, it is now set to writeable")
 
             if HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK']==True:
                 ## Here I'd want a patch for this
-                print "\tHashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK'] = %s" % HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK']
+                print("\tHashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK'] = %s" % HashInstructions['GROW_LAST_PARTITION_TO_FILL_DISK'])
 
-                print "\njust set LAST PartitionSectorSize = 0 (it was %d)" % PartitionSectorSize
+                print("\njust set LAST PartitionSectorSize = 0 (it was %d)" % PartitionSectorSize)
                 PartitionSectorSize = 0
-                print "This means the partition table will have a zero in it"
+                print("This means the partition table will have a zero in it")
                 LastPartitionBeginsAt = FirstLBA
 
             NumEBRs = (len(PhyPartition[k])-3)
             SectorOffsetPatchBefore = NumEBRs
             SectorOffsetPatchAfter  = ExtendedPartitionBegins+NumEBRs-1
             ByteOffset              = 0x1CA
-            
+
             ## Patch no matter what
             UpdatePatch(str(SectorOffsetPatchBefore),str(ByteOffset),PhysicalPartitionNumber,4,"NUM_DISK_SECTORS-%s." % str(FirstLBA+1),"partition%d.bin" % k, "Update last partition with actual size.")
             UpdatePatch(str(SectorOffsetPatchBefore-1),str(ByteOffset),PhysicalPartitionNumber,4,"NUM_DISK_SECTORS-%s." % str(FirstLBA+1),"EBR%d.bin" % k, "Update last partition with actual size.")
             UpdatePatch(str(SectorOffsetPatchAfter), str(ByteOffset),PhysicalPartitionNumber,4,"NUM_DISK_SECTORS-%s." % str(FirstLBA+1),"DISK", "Update last partition with actual size.")
 
 
-        print "\tPhyPartition[k][j]['align']=",PhyPartition[k][j]['align']
-        print "\tSectorsTillNextBoundary=",SectorsTillNextBoundary
+        print("\tPhyPartition[k][j]['align']=",PhyPartition[k][j]['align'])
+        print("\tSectorsTillNextBoundary=",SectorsTillNextBoundary)
 
         if PhyPartition[k][j]['readonly']=="true":
             ## to be here means this partition is read-only, so see if we need to move the start
             if FirstLBA <= hash_w[NumWPregions]["end_sector"]:
-                print "Great, We *don't* need to move FirstLBA (%d) since it's covered by the end of the current WP region (%d)" % (FirstLBA,hash_w[NumWPregions]["end_sector"])
+                print("Great, We *don't* need to move FirstLBA (%d) since it's covered by the end of the current WP region (%d)" % (FirstLBA,hash_w[NumWPregions]["end_sector"]))
                 pass
             else:
-                print "\tFirstLBA (%d) is *not* covered by the end of the WP region (%d),\n\tit needs to be moved to be aligned to %d" % (FirstLBA,hash_w[NumWPregions]["end_sector"],FirstLBA + SectorsTillNextBoundary)
+                print("\tFirstLBA (%d) is *not* covered by the end of the WP region (%d),\n\tit needs to be moved to be aligned to %d" % (FirstLBA,hash_w[NumWPregions]["end_sector"],FirstLBA + SectorsTillNextBoundary))
                 FirstLBA += SectorsTillNextBoundary
         elif PhyPartition[k][j]['align']=="true":
-            ## to be here means this partition *must* be on an ALIGN boundary 
+            ## to be here means this partition *must* be on an ALIGN boundary
             SectorsTillNextBoundary = ReturnNumSectorsTillBoundary(FirstLBA,HashInstructions['ALIGN_BOUNDARY_IN_KB'])
             if SectorsTillNextBoundary>0:
-                print "\tSectorsTillNextBoundary=%d, FirstLBA=%d it needs to be moved to be aligned to %d" % (SectorsTillNextBoundary,FirstLBA,FirstLBA + SectorsTillNextBoundary)
-                print "\tHashInstructions['ALIGN_BOUNDARY_IN_KB']=",HashInstructions['ALIGN_BOUNDARY_IN_KB']
+                print("\tSectorsTillNextBoundary=%d, FirstLBA=%d it needs to be moved to be aligned to %d" % (SectorsTillNextBoundary,FirstLBA,FirstLBA + SectorsTillNextBoundary))
+                print("\tHashInstructions['ALIGN_BOUNDARY_IN_KB']=",HashInstructions['ALIGN_BOUNDARY_IN_KB'])
                 FirstLBA += SectorsTillNextBoundary
-                
+
                 AlignedRemainder = FirstLBA % HashInstructions['ALIGN_BOUNDARY_IN_KB'];
-                
+
                 if AlignedRemainder==0:
-                    print "\tThis partition is ** ALIGNED ** to a %i KB boundary at sector %i (boundary %i)" % (HashInstructions['ALIGN_BOUNDARY_IN_KB'],FirstLBA,FirstLBA/(ConvertKBtoSectors(HashInstructions['ALIGN_BOUNDARY_IN_KB'])))
+                    print("\tThis partition is ** ALIGNED ** to a %i KB boundary at sector %i (boundary %i)" % (HashInstructions['ALIGN_BOUNDARY_IN_KB'],FirstLBA,FirstLBA/(ConvertKBtoSectors(HashInstructions['ALIGN_BOUNDARY_IN_KB']))))
 
         else:
-            print "\n\tThis partition is *NOT* readonly (or does not have align='true')"
+            print("\n\tThis partition is *NOT* readonly (or does not have align='true')")
             ## to be here means this partition is writeable, so see if we need to move the start
             if FirstLBA <= hash_w[NumWPregions]["end_sector"]:
-                print "\tWe *need* to move FirstLBA (%d) since it's covered by the end of the current WP region (%d)" % (FirstLBA,hash_w[NumWPregions]["end_sector"])
-                print "\nhash_w[NumWPregions]['end_sector']=%i" % hash_w[NumWPregions]["end_sector"];
-                print "FirstLBA=%i\n" %FirstLBA;
+                print("\tWe *need* to move FirstLBA (%d) since it's covered by the end of the current WP region (%d)" % (FirstLBA,hash_w[NumWPregions]["end_sector"]))
+                print("\nhash_w[NumWPregions]['end_sector']=%i" % hash_w[NumWPregions]["end_sector"]);
+                print("FirstLBA=%i\n" %FirstLBA);
                 FirstLBA += SectorsTillNextBoundary
 
-                print "\tFirstLBA is now %d" % (FirstLBA)
+                print("\tFirstLBA is now %d" % (FirstLBA))
             else:
                 #print "Great, We *don't* need to move FirstLBA (%d) since it's *not* covered by the end of the current WP region (%d)" % (FirstLBA,hash_w[NumWPregions]["end_sector"])
                 pass
 
         if HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']>0:
             AlignedRemainder = FirstLBA % HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'];
-        
+
             if AlignedRemainder==0:
-                print "\tThis partition is ** ALIGNED ** to a %i KB boundary at sector %i (boundary %i)" % (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'],FirstLBA,FirstLBA/(ConvertKBtoSectors(HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'])))
+                print("\tThis partition is ** ALIGNED ** to a %i KB boundary at sector %i (boundary %i)" % (HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB'],FirstLBA,FirstLBA/(ConvertKBtoSectors(HashInstructions['WRITE_PROTECT_BOUNDARY_IN_KB']))))
 
         if PhyPartition[k][j]['readonly']=="true":
             UpdateWPhash(FirstLBA, PartitionSectorSize)
 
         LastLBA = FirstLBA + PartitionSectorSize
 
-        print "\n\tFirstLBA=%u, LastLBA=%u, PartitionSectorSize=%u" % (FirstLBA,LastLBA,PartitionSectorSize)
+        print("\n\tFirstLBA=%u, LastLBA=%u, PartitionSectorSize=%u" % (FirstLBA,LastLBA,PartitionSectorSize))
 
-        print "\tLastLBA is currently %i sectors" % LastLBA
-        print "\tCard size of at least %.1fMB needed (%u sectors)" % (LastLBA/2048.0,LastLBA)
+        print("\tLastLBA is currently %i sectors" % LastLBA)
+        print("\tCard size of at least %.1fMB needed (%u sectors)" % (LastLBA/2048.0,LastLBA))
         PhyPartition[k][j]['size_in_kb'] = PartitionSectorSize/2
 
         ## Default for each partition is no file
@@ -2179,13 +2178,13 @@ def CreateExtendedBootRecords(k,NumEBRPartitions):
             ##print "filename exists"
             #print PhyPartition[k][j]['filename']
             #print FileToProgram[0]
-            
+
             FileToProgram[0]            = PhyPartition[k][j]['filename'][0]
             FileOffset[0]               = PhyPartition[k][j]['fileoffset'][0]
             FilePartitionOffset[0]      = PhyPartition[k][j]['filepartitionoffset'][0]
             FileAppsbin[0]              = PhyPartition[k][j]['appsbin'][0]
             FileSparse[0]               = PhyPartition[k][j]['sparse'][0]
-            
+
             for z in range(1,len(PhyPartition[k][j]['filename'])):
                 FileToProgram.append( PhyPartition[k][j]['filename'][z] )
                 FileOffset.append( PhyPartition[k][j]['fileoffset'][z] )
@@ -2194,7 +2193,7 @@ def CreateExtendedBootRecords(k,NumEBRPartitions):
                 FileSparse.append( PhyPartition[k][j]['sparse'][z] )
 
             #print PhyPartition[k][j]['fileoffset']
-            
+
 
         #for z in range(len(FileToProgram)):
         #    print "FileToProgram[",z,"]=",FileToProgram[z]
@@ -2247,31 +2246,31 @@ def CreateExtendedBootRecords(k,NumEBRPartitions):
         FirstLBA = LastLBA      # getting ready for next partition, FirstLBA is now where we left off
 
 
-    print "\n------------------------------------------------------------------------------"
-    print "             LastLBA is currently %i sectors" % (LastLBA)
-    print "       Card size of at least %.1fMB needed (%u sectors)" % (LastLBA/2048.0,LastLBA)
-    print "------------------------------------------------------------------------------"
+    print("\n------------------------------------------------------------------------------")
+    print("             LastLBA is currently %i sectors" % (LastLBA))
+    print("       Card size of at least %.1fMB needed (%u sectors)" % (LastLBA/2048.0,LastLBA))
+    print("------------------------------------------------------------------------------")
 
 def ReturnNumSectorsTillBoundary(CurrentLBA, BoundaryInKB):
     #Say BoundaryInKB is 65536 (64MB)
     #    if SECTOR_SIZE_IN_BYTES=512,  BoundaryLBA=131072
     #    if SECTOR_SIZE_IN_BYTES=4096, BoundaryLBA=16384
-    
+
     #Say were at the 63MB boundary, then
     #    if SECTOR_SIZE_IN_BYTES=512,  CurrentLBA=129024
     #    if SECTOR_SIZE_IN_BYTES=4096, CurrentLBA=16128
-    
+
     # Distance is then 1MB
     #    if SECTOR_SIZE_IN_BYTES=512,  DistanceLBA=2048   (2048*512=1MB)
-    #    if SECTOR_SIZE_IN_BYTES=4096, DistanceLBA=256	  (256*4096=1MB)
+    #    if SECTOR_SIZE_IN_BYTES=4096, DistanceLBA=256    (256*4096=1MB)
 
     ##import pdb; pdb.set_trace()
-    
+
     x = 0
     if BoundaryInKB>0:
         if (CurrentLBA%ConvertKBtoSectors(BoundaryInKB)) > 0:
             x = ConvertKBtoSectors(BoundaryInKB) - (CurrentLBA%ConvertKBtoSectors(BoundaryInKB))
-    
+
     ##print "\tFYI: Increase by %dKB (%d sectors) if you want to align to %i KB boundary at sector %d" % (x/2,x,BoundaryInKB,CurrentLBA+x)
     return x
 
@@ -2287,35 +2286,35 @@ def WriteEBR():
         opfile.write(struct.pack("B", b))
 
 def PrintBigError(sz):
-    print "\t _________________ ___________ "
-    print "\t|  ___| ___ \\ ___ \\  _  | ___ \\"
-    print "\t| |__ | |_/ / |_/ / | | | |_/ /"
-    print "\t|  __||    /|    /| | | |    / "
-    print "\t| |___| |\\ \\| |\\ \\\\ \\_/ / |\\ \\ "
-    print "\t\\____/\\_| \\_\\_| \\_|\\___/\\_| \\_|\n"
+    print("\t _________________ ___________ ")
+    print("\t|  ___| ___ \\ ___ \\  _  | ___ \\")
+    print("\t| |__ | |_/ / |_/ / | | | |_/ /")
+    print("\t|  __||    /|    /| | | |    / ")
+    print("\t| |___| |\\ \\| |\\ \\\\ \\_/ / |\\ \\ ")
+    print("\t\\____/\\_| \\_\\_| \\_|\\___/\\_| \\_|\n")
 
     if len(sz)>0:
-        print sz
+        print(sz)
         sys.exit(1)
-                                   
+
 
 def find_file(filename, search_paths):
-    print "\n\n\tLooking for ",filename
-    print "\t"+"-"*40
+    print("\n\n\tLooking for ",filename)
+    print("\t"+"-"*40)
     for x in search_paths:
-        print "\tSearching ",x
+        print("\tSearching ",x)
         temp = os.path.join(x, filename)
         if os.path.exists(temp):
-            print "\n\t**Found %s (%i bytes)" % (temp,os.path.getsize(temp))
+            print("\n\t**Found %s (%i bytes)" % (temp,os.path.getsize(temp)))
             return temp
 
     ## search cwd last
-    print "\tSearching ",os.getcwd()
+    print("\tSearching ",os.getcwd())
     if os.path.exists(filename):
-        print "\n\t**Found %s (%i bytes)" % (filename,os.path.getsize(filename))
+        print("\n\t**Found %s (%i bytes)" % (filename,os.path.getsize(filename)))
         return filename
 
-    print "\tCound't find file\n"
+    print("\tCound't find file\n")
     return None
 
 ## ==============================================================================================
@@ -2331,17 +2330,17 @@ if len(sys.argv) < 2:
     ShowUsage()
     sys.exit(); # error
 
-print "\nCWD: ", os.getcwd(), "\n"
+print("\nCWD: ", os.getcwd(), "\n")
 
 try:
-    opts, args = getopt.getopt(sys.argv[1:], "x:f:p:s:t:g:k:v:e", ["xml=", "format=", "partition=", "search_path=", "location=", "sequentialguid=", "use128partitions=", "verbose=","erasefirst"])
-except getopt.GetoptError, err:
+    opts, args = getopt.getopt(sys.argv[1:], "x:f:p:s:t:g:k:v:en", ["xml=", "format=", "partition=", "search_path=", "location=", "sequentialguid=", "use128partitions=", "verbose=","erasefirst","nopatch"])
+except getopt.GetoptError as err:
     # print help information and exit:
-    print str(err) # will print something like "option -a not recognized"
+    print(str(err)) # will print something like "option -a not recognized"
     ShowUsage()
     sys.exit(1)
 
-XMLFile= "aaron"
+XMLFile= "adalovelace"
 OutputToCreate          = None ## sys.argv[2]
 PhysicalPartitionNumber = 0     ## sys.argv[3]
 search_paths            = []
@@ -2369,14 +2368,14 @@ for o, a in opts:
         else:
             OutputFolder = re.sub(r"/","\\\\",OutputFolder) # correct slashes
 
-        print "OutputFolder=",OutputFolder
+        print("OutputFolder=",OutputFolder)
         EnsureDirectoryExists(OutputFolder) # only need to call once
 
     elif o in ("-f", "--format"):
         UsingGetOpts = True
         OutputToCreate = a
         m = re.search("^(mbr|gpt)$", a)     #mbr|gpt
-        if type(m) is NoneType:
+        if m is None:
             PrintBigError("ERROR: Only MBR or GPT is supported")
         else:
             OutputToCreate = m.group(1)
@@ -2389,7 +2388,7 @@ for o, a in opts:
     elif o in ("-k", "--use128partitions"):
         ## Force there to be 128 partitions in the partition table
         m = re.search("\d", a)     #mbr|gpt
-        if type(m) is NoneType:
+        if m is None:
             force128partitions = 0
         else:
             force128partitions = 1
@@ -2397,10 +2396,13 @@ for o, a in opts:
     elif o in ("-e", "--erasefirst"):
         erasefirst = 1;
 
+    elif o in ("-n", "--nopatch"):
+        gen_patch = False;
+
     elif o in ("-g", "--sequentialguid"):
         ## also allow seperating commas
         m = re.search("\d", a)     #mbr|gpt
-        if type(m) is NoneType:
+        if m is None:
             sequentialguid = 0
         else:
             sequentialguid = 1
@@ -2409,7 +2411,7 @@ for o, a in opts:
         UsingGetOpts = True
         PhysicalPartitionNumber = a
         m = re.search("^(\d)$", a)     #0|1|2
-        if type(m) is NoneType:
+        if m is None:
             PrintBigError("ERROR: PhysicalPartitionNumber (-p) must be a number, you supplied *",a,"*")
         else:
             PhysicalPartitionNumber = int(m.group(1))
@@ -2417,7 +2419,7 @@ for o, a in opts:
         UsingGetOpts = True
         verbose = True
     else:
-        print "o=",o
+        print("o=",o)
         assert False, "unhandled option"
 
 if UsingGetOpts is False:
@@ -2426,12 +2428,12 @@ if UsingGetOpts is False:
     ShowUsage()
     sys.exit(1)
 
-print "XMLFile=",XMLFile
+print("XMLFile=",XMLFile)
 if len(OutputFolder)>0:
-    print "OutputFolder=",OutputFolder
-print "OutputToCreate",OutputToCreate
-print "PhysicalPartitionNumber",PhysicalPartitionNumber
-print "verbose",verbose
+    print("OutputFolder=",OutputFolder)
+print("OutputToCreate",OutputToCreate)
+print("PhysicalPartitionNumber",PhysicalPartitionNumber)
+print("verbose",verbose)
 
 
 XMLFile = find_file(XMLFile, search_paths)
@@ -2479,7 +2481,7 @@ if OutputToCreate == "gpt":
             InitializeXMLFileVars()
             CreateGPTPartitionTable( PhysicalPartitionNumber ) ## wants it in LBA format, i.e. 1KB = 2 sectors of size SECTOR_SIZE_IN_BYTES
         CreateErasingRawProgramFiles()
-        print "\n\nNOTE: All Physical Partitions / LUNs were created since user did not use -p 0 option\n\n"
+        print("\n\nNOTE: All Physical Partitions / LUNs were created since user did not use -p 0 option\n\n")
     else:
         InitializeXMLFileVars()
         CreateGPTPartitionTable( PhysicalPartitionNumber, True ) ## wants it in LBA format, i.e. 1KB = 2 sectors of size SECTOR_SIZE_IN_BYTES
@@ -2489,5 +2491,3 @@ else:
     CreateMBRPartitionTable( PhysicalPartitionNumber )
     CreateFinalPartitionBin()
 
-
-
-- 
2.34.1

